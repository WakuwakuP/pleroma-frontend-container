{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/following/index.js"],"names":["RemoteHint","url","resource","id","defaultMessage","Following","connect","state","params","acct","accountId","getIn","remote","remoteUrl","isAccount","accountIds","hasMore","isLoading","suspended","hidden","getAccountHidden","blockedBy","ImmutablePureComponent","handleLoadMore","this","props","dispatch","expandFollowing","leading","_load","fetchAccount","fetchFollowing","componentDidMount","lookupAccount","componentDidUpdate","prevProps","render","multiColumn","emptyMessage","forceEmptyState","isEmpty","remoteMessage","scrollKey","onLoadMore","prepend","hideTabs","alwaysPrepend","append","bindToDocument","map","withNote","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"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","file":"js/features/following-895fd8bad033e17df405.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowing,\n  expandFollowing,\n} from '../../actions/accounts';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport HeaderContainer from '../account_timeline/containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ScrollableList from '../../components/scrollable_list';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport LimitedAccountHint from '../account_timeline/components/limited_account_hint';\nimport { getAccountHidden } from 'mastodon/selectors';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', acct]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'following', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'following', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'following', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.follows' defaultMessage='Follows' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass Following extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowing(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowing(this.props.accountId));\n  }, 300, { leading: true });\n\n  render () {\n    const { accountId, accountIds, hasMore, blockedBy, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = blockedBy || suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.follows.empty' defaultMessage=\"This user doesn't follow anyone yet.\" />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='following'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {forceEmptyState ? [] : accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}