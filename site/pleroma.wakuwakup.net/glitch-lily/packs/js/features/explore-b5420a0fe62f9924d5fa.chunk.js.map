{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/components/story.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/links.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/tags.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/statuses.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/suggestions.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/results.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/explore/index.js"],"names":["Story","React","PureComponent","state","thumbnailLoaded","handleImageLoad","this","setState","render","url","title","publisher","sharedTimes","thumbnail","blurhash","props","className","href","target","rel","width","value","renderer","accountsCountRenderer","Fragment","classNames","hash","src","onLoad","alt","role","Links","connect","links","getIn","isLoading","componentDidMount","dispatch","fetchTrendingLinks","map","link","get","Tags","hashtags","isLoadingHashtags","fetchTrendingHashtags","hashtag","Statuses","statusIds","hasMore","handleLoadMore","expandTrendingStatuses","leading","fetchTrendingStatuses","multiColumn","emptyMessage","id","defaultMessage","trackScroll","scrollKey","onLoadMore","bindToDocument","withCounters","Suggestions","suggestions","fetchSuggestions","suggestion","appendLoadMore","list","size","push","visible","onClick","renderAccounts","results","ImmutableList","item","renderHashtags","renderStatuses","Results","type","handleSelectAll","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","handleLoadMoreAccounts","loadMore","handleLoadMoreStatuses","handleLoadMoreHashtags","expandSearch","filteredResults","concat","messages","defineMessages","searchResults","Explore","layout","isSearching","injectIntl","handleHeaderClick","column","scrollTop","setRef","c","intl","ref","label","formatMessage","icon","NavLink","exact","to","Switch","Route","path","component","componentParams","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/features/explore-b5420a0fe62f9924d5fa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Blurhash from 'mastodon/components/blurhash';\nimport { accountsCountRenderer } from 'mastodon/components/hashtag';\nimport ShortNumber from 'mastodon/components/short_number';\nimport Skeleton from 'mastodon/components/skeleton';\nimport classNames from 'classnames';\n\nexport default class Story extends React.PureComponent {\n\n  static propTypes = {\n    url: PropTypes.string,\n    title: PropTypes.string,\n    publisher: PropTypes.string,\n    sharedTimes: PropTypes.number,\n    thumbnail: PropTypes.string,\n    blurhash: PropTypes.string,\n  };\n\n  state = {\n    thumbnailLoaded: false,\n  };\n\n  handleImageLoad = () => this.setState({ thumbnailLoaded: true });\n\n  render () {\n    const { url, title, publisher, sharedTimes, thumbnail, blurhash } = this.props;\n\n    const { thumbnailLoaded } = this.state;\n\n    return (\n      <a className='story' href={url} target='blank' rel='noopener'>\n        <div className='story__details'>\n          <div className='story__details__publisher'>{publisher ? publisher : <Skeleton width={50} />}</div>\n          <div className='story__details__title'>{title ? title : <Skeleton />}</div>\n          <div className='story__details__shared'>{typeof sharedTimes === 'number' ? <ShortNumber value={sharedTimes} renderer={accountsCountRenderer} /> : <Skeleton width={100} />}</div>\n        </div>\n\n        <div className='story__thumbnail'>\n          {thumbnail ? (\n            <React.Fragment>\n              <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n              <img src={thumbnail} onLoad={this.handleImageLoad} alt='' role='presentation' />\n            </React.Fragment>\n          ) : <Skeleton />}\n        </div>\n      </a>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Story from './components/story';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingLinks } from 'mastodon/actions/trends';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Links extends React.PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    return (\n      <div className='explore__links'>\n        {isLoading ? (<LoadingIndicator />) : links.map(link => (\n          <Story\n            key={link.get('id')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Tags extends React.PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    return (\n      <div className='explore__links'>\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusList from 'mastodon/components/status_list';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'mastodon/actions/trends';\nimport { debounce } from 'lodash';\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'trending', 'items']),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nexport default @connect(mapStateToProps)\nclass Statuses extends React.PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true })\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <StatusList\n        trackScroll\n        statusIds={statusIds}\n        scrollKey='explore-statuses'\n        hasMore={hasMore}\n        isLoading={isLoading}\n        onLoadMore={this.handleLoadMore}\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n        withCounters\n      />\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport AccountCard from 'mastodon/features/directory/components/account_card';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Suggestions extends React.PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchSuggestions(true));\n  }\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    return (\n      <div className='explore__suggestions'>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <AccountCard key={suggestion.get('account')} id={suggestion.get('account')} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { expandSearch } from 'mastodon/actions/search';\nimport Account from 'mastodon/containers/account_container';\nimport Status from 'mastodon/containers/status_container';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { List as ImmutableList } from 'immutable';\nimport LoadMore from 'mastodon/components/load_more';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n});\n\nconst appendLoadMore = (id, list, onLoadMore) => {\n  if (list.size >= 5) {\n    return list.push(<LoadMore key={`${id}-load-more`} visible onClick={onLoadMore} />);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = (results, onLoadMore) => appendLoadMore('accounts', results.get('accounts', ImmutableList()).map(item => (\n  <Account key={`account-${item}`} id={item} />\n)), onLoadMore);\n\nconst renderHashtags = (results, onLoadMore) => appendLoadMore('hashtags', results.get('hashtags', ImmutableList()).map(item => (\n  <Hashtag key={`tag-${item.get('name')}`} hashtag={item} />\n)), onLoadMore);\n\nconst renderStatuses = (results, onLoadMore) => appendLoadMore('statuses', results.get('statuses', ImmutableList()).map(item => (\n  <Status key={`status-${item}`} id={item} />\n)), onLoadMore);\n\nexport default @connect(mapStateToProps)\nclass Results extends React.PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  state = {\n    type: 'all',\n  };\n\n  handleSelectAll = () => this.setState({ type: 'all' });\n  handleSelectAccounts = () => this.setState({ type: 'accounts' });\n  handleSelectHashtags = () => this.setState({ type: 'hashtags' });\n  handleSelectStatuses = () => this.setState({ type: 'statuses' });\n  handleLoadMoreAccounts = () => this.loadMore('accounts');\n  handleLoadMoreStatuses = () => this.loadMore('statuses');\n  handleLoadMoreHashtags = () => this.loadMore('hashtags');\n\n  loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  render () {\n    const { isLoading, results } = this.props;\n    const { type } = this.state;\n\n    let filteredResults = ImmutableList();\n\n    if (!isLoading) {\n      switch(type) {\n      case 'all':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts), renderHashtags(results, this.handleLoadMoreHashtags), renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      case 'accounts':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts));\n        break;\n      case 'hashtags':\n        filteredResults = filteredResults.concat(renderHashtags(results, this.handleLoadMoreHashtags));\n        break;\n      case 'statuses':\n        filteredResults = filteredResults.concat(renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      }\n\n      if (filteredResults.size === 0) {\n        filteredResults = (\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' && 'active'}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' && 'active'}><FormattedMessage id='search_results.accounts' defaultMessage='People' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' && 'active'}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' && 'active'}><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></button>\n        </div>\n\n        <div className='explore__search-results'>\n          {isLoading ? <LoadingIndicator /> : filteredResults}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport Links from './links';\nimport Tags from './tags';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Search from 'mastodon/features/compose/containers/search_container';\nimport SearchResults from './results';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Explore extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n    layout: PropTypes.string,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { intl, multiColumn, isSearching, layout } = this.props;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        {layout === 'mobile' ? (\n          <div className='explore__search-header'>\n            <Search />\n          </div>\n        ) : (\n          <ColumnHeader\n            icon={isSearching ? 'search' : 'hashtag'}\n            title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n            onClick={this.handleHeaderClick}\n            multiColumn={multiColumn}\n          />\n        )}\n\n        <div className='scrollable scrollable--flex'>\n          {isSearching ? (\n            <SearchResults />\n          ) : (\n            <React.Fragment>\n              <div className='account__section-headline'>\n                <NavLink exact to='/explore'><FormattedMessage id='explore.trending_statuses' defaultMessage='Posts' /></NavLink>\n                <NavLink exact to='/explore/tags'><FormattedMessage id='explore.trending_tags' defaultMessage='Hashtags' /></NavLink>\n                <NavLink exact to='/explore/links'><FormattedMessage id='explore.trending_links' defaultMessage='News' /></NavLink>\n                <NavLink exact to='/explore/suggestions'><FormattedMessage id='explore.suggested_follows' defaultMessage='For you' /></NavLink>\n              </div>\n\n              <Switch>\n                <Route path='/explore/tags' component={Tags} />\n                <Route path='/explore/links' component={Links} />\n                <Route path='/explore/suggestions' component={Suggestions} />\n                <Route exact path={['/explore', '/explore/posts', '/search']} component={Statuses} componentParams={{ multiColumn }} />\n              </Switch>\n            </React.Fragment>\n          )}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}