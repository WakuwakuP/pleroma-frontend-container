{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/components/avatar_composite.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/direct_timeline/components/conversation.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/direct_timeline/containers/conversation_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/direct_timeline/components/conversations_list.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/direct_timeline/containers/conversations_list_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/direct_timeline/index.js"],"names":["AvatarComposite","React","PureComponent","renderItem","account","size","index","animate","this","props","width","height","top","left","bottom","right","style","backgroundSize","backgroundImage","get","render","accounts","className","take","map","i","Math","min","defaultProps","autoPlayGif","messages","defineMessages","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","injectIntl","ImmutablePureComponent","handleMouseEnter","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","handleClick","context","router","lastStatus","unread","markRead","history","push","getIn","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","scrollKey","intl","menu","text","formatMessage","action","names","a","to","href","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","classNames","tabIndex","onClick","role","timestamp","onMouseEnter","onMouseLeave","id","defaultMessage","values","status","expanded","onExpandedToggle","collapsable","compact","media","icon","items","direction","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","replyConfirm","replyMessage","connect","getStatus","makeGetStatus","state","conversation","find","x","lastStatusId","accountId","dispatch","markConversationRead","_","getState","trim","openModal","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","last","onLoadMore","leading","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","other","ref","item","hasMore","isLoading","maxId","expandConversations","DirectTimeline","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMore","componentDidMount","mountConversations","disconnect","connectDirectStream","componentWillUnmount","unmountConversations","hasUnread","multiColumn","pinned","bindToDocument","label","active","onPin","onMove","trackScroll","timelineId","prepend","target","emptyMessage"],"mappings":"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","file":"js/features/direct_timeline-8c76e396f2911e45441f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { autoPlayGif } from '../initial_state';\n\nexport default class AvatarComposite extends React.PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n      backgroundSize: 'cover',\n      backgroundImage: `url(${account.get(animate ? 'avatar' : 'avatar_static')})`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style} />\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport StatusContent from 'mastodon/components/status_content';\nimport AttachmentList from 'mastodon/components/attachment_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport AvatarComposite from 'mastodon/components/avatar_composite';\nimport Permalink from 'mastodon/components/permalink';\nimport IconButton from 'mastodon/components/icon_button';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport { HotKeys } from 'react-hotkeys';\nimport { autoPlayGif } from 'mastodon/initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nexport default @injectIntl\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  }\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  }\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  }\n\n  handleDelete = () => {\n    this.props.delete();\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  }\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  }\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n  }\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Permalink to={`/@${a.get('acct')}`} href={a.get('url')} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Permalink>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex='0'>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              onClick={this.handleClick}\n              expanded={!lastStatus.get('hidden')}\n              onExpandedToggle={this.handleShowMore}\n              collapsable\n            />\n\n            {lastStatus.get('media_attachments').size > 0 && (\n              <AttachmentList\n                compact\n                media={lastStatus.get('media_attachments')}\n              />\n            )}\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { makeGetStatus } from 'mastodon/selectors';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ConversationContainer from '../containers/conversation_container';\nimport ScrollableList from '../../../components/scrollable_list';\nimport { debounce } from 'lodash';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id)\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true })\n\n  render () {\n    const { conversations, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ConversationsList from '../components/conversations_list';\nimport { expandConversations } from '../../../actions/conversations';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { mountConversations, unmountConversations, expandConversations } from '../../actions/conversations';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connectDirectStream } from '../../actions/streaming';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nexport default @connect()\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='at'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}