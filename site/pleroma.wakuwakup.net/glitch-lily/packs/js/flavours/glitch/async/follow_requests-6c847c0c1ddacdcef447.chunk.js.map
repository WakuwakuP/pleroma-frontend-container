{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/follow_requests/components/account_authorize.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/follow_requests/containers/account_authorize_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/follow_requests/index.js"],"names":["messages","defineMessages","authorize","reject","AccountAuthorize","injectIntl","ImmutablePureComponent","render","intl","account","onAuthorize","onReject","this","props","content","__html","get","className","href","to","size","dangerouslySetInnerHTML","title","formatMessage","icon","onClick","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","func","object","connect","getAccount","makeGetAccount","state","id","dispatch","authorizeFollowRequest","rejectFollowRequest","heading","FollowRequests","accountIds","getIn","isLoading","hasMore","locked","me","domain","handleLoadMore","expandFollowRequests","leading","componentWillMount","fetchFollowRequests","multiColumn","name","emptyMessage","defaultMessage","unlockedPrependMessage","values","bindToDocument","scrollKey","onLoadMore","prepend","params","bool","list","string"],"mappings":"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","file":"js/flavours/glitch/async/follow_requests-6c847c0c1ddacdcef447.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass AccountAuthorize extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, account, onAuthorize, onReject } = this.props;\n    const content = { __html: account.get('note_emojified') };\n\n    return (\n      <div className='account-authorize__wrapper'>\n        <div className='account-authorize'>\n          <Permalink href={account.get('url')} to={`/@${account.get('acct')}`} className='detailed-status__display-name'>\n            <div className='account-authorize__avatar'><Avatar account={account} size={48} /></div>\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__header__content translate' dangerouslySetInnerHTML={content} />\n        </div>\n\n        <div className='account--panel'>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} /></div>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport AccountAuthorize from '../components/account_authorize';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'flavours/glitch/actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AccountAuthorize);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnBackButtonSlim from 'flavours/glitch/components/column_back_button_slim';\nimport AccountAuthorizeContainer from './containers/account_authorize_container';\nimport { fetchFollowRequests, expandFollowRequests } from 'flavours/glitch/actions/accounts';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { me } from 'flavours/glitch/util/initial_state';\n\nconst messages = defineMessages({\n  heading: { id: 'column.follow_requests', defaultMessage: 'Follow requests' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'follow_requests', 'items']),\n  isLoading: state.getIn(['user_lists', 'follow_requests', 'isLoading'], true),\n  hasMore: !!state.getIn(['user_lists', 'follow_requests', 'next']),\n  locked: !!state.getIn(['accounts', me, 'locked']),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass FollowRequests extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list,\n    locked: PropTypes.bool,\n    domain: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFollowRequests());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowRequests());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, locked, domain, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column name='follow-requests'>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.follow_requests' defaultMessage=\"You don't have any follow requests yet. When you receive one, it will show up here.\" />;\n    const unlockedPrependMessage = locked ? null : (\n      <div className='follow_requests-unlocked_explanation'>\n        <FormattedMessage\n          id='follow_requests.unlocked_explanation'\n          defaultMessage='Even though your account is not locked, the {domain} staff thought you might want to review follow requests from these accounts manually.'\n          values={{ domain: domain }}\n        />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} name='follow-requests' icon='user-plus' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n\n        <ScrollableList\n          scrollKey='follow_requests'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          prepend={unlockedPrependMessage}\n        >\n          {accountIds.map(id =>\n            <AccountAuthorizeContainer key={id} id={id} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}