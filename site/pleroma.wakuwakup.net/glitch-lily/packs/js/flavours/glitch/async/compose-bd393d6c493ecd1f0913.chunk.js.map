{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/compose/components/header.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/compose/containers/header_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/compose/index.js"],"names":["messages","defineMessages","community","home_timeline","logout","notifications","public","settings","start","Header","injectIntl","ImmutablePureComponent","handleLogoutClick","e","preventDefault","stopPropagation","this","props","onLogout","render","intl","columns","unreadNotifications","showNotificationsBadge","onSettingsClick","renderForColumn","conditionalRender","bind","columnId","some","column","get","className","Link","aria-label","formatMessage","title","to","id","onClick","href","signOutLink","propTypes","ImmutablePropTypes","list","PropTypes","number","bool","object","func","isRequired","logoutMessage","logoutConfirm","connect","state","getIn","dispatch","openModal","message","confirm","closeWhenConfirm","onConfirm","compose","Compose","ownProps","elefriend","showSearch","multiColumn","isSearchPage","onClickElefriend","cycleElefriendCompose","onMount","mountCompose","onUnmount","unmountCompose","React","PureComponent","componentDidMount","componentWillUnmount","computedClass","classNames","role","mascot","alt","draggable","src","defaultStyle","x","style","spring","stiffness","damping","transform","visibility"],"mappings":"8WAgBA,MAAMA,EAAWC,YAAe,CAC9BC,UAAU,CAAD,wEAITC,cAAc,CAAD,0CAIbC,OAAO,CAAD,oDAINC,cAAc,CAAD,4DAIbC,OAAO,CAAD,yEAINC,SAAS,CAAD,gEAIRC,MAAM,CAAD,iE,IAODC,EADUC,c,EAAD,cACMC,IAAwB,cAAD,yBAU1CC,kBAAoBC,IAClBA,EAAEC,iBACFD,EAAEE,kBAEFC,KAAKC,MAAMC,YAEJ,GAGTC,SACE,MAAM,KAAEC,EAAF,QAAQC,EAAR,oBAAiBC,EAAjB,uBAAsCC,EAAtC,gBAA8DC,GAAoBR,KAAKC,MAGvFQ,EAAkBC,IAAkBC,KAAK,MAC7CC,IAAaP,IAAYA,EAAQQ,MAC/BC,GAAUA,EAAOC,IAAI,QAAUH,MAKnC,OACE,mBAAKI,UAAU,uBAAf,EACE,YAACC,EAAA,EAAD,CACEC,aAAYd,EAAKe,cAAcnC,EAASQ,OACxC4B,MAAOhB,EAAKe,cAAcnC,EAASQ,OACnC6B,GAAG,yBAHL,EAIC,YAAC,IAAD,CAAMC,GAAG,cACTb,EAAgB,OACf,YAACQ,EAAA,EAAD,CACEC,aAAYd,EAAKe,cAAcnC,EAASG,eACxCiC,MAAOhB,EAAKe,cAAcnC,EAASG,eACnCkC,GAAG,cAHL,EAIC,YAAC,IAAD,CAAMC,GAAG,WAEXb,EAAgB,gBACf,YAACQ,EAAA,EAAD,CACEC,aAAYd,EAAKe,cAAcnC,EAASK,eACxC+B,MAAOhB,EAAKe,cAAcnC,EAASK,eACnCgC,GAAG,uBAHL,EAKE,oBAAML,UAAU,2BAAhB,EACE,YAAC,IAAD,CAAMM,GAAG,SACPf,GAA0BD,EAAsB,GAAK,mBAAKU,UAAU,kBAI3EP,EAAgB,YACf,YAACQ,EAAA,EAAD,CACEC,aAAYd,EAAKe,cAAcnC,EAASE,WACxCkC,MAAOhB,EAAKe,cAAcnC,EAASE,WACnCmC,GAAG,sBAHL,EAIC,YAAC,IAAD,CAAMC,GAAG,YAEXb,EAAgB,SACf,YAACQ,EAAA,EAAD,CACEC,aAAYd,EAAKe,cAAcnC,EAASM,QACxC8B,MAAOhB,EAAKe,cAAcnC,EAASM,QACnC+B,GAAG,gBAHL,EAIC,YAAC,IAAD,CAAMC,GAAG,YAEZ,iBACEJ,aAAYd,EAAKe,cAAcnC,EAASO,UACxCgC,QAASf,EACTgB,KAAK,wBACLJ,MAAOhB,EAAKe,cAAcnC,EAASO,gBAJrC,EAKC,YAAC,IAAD,CAAM+B,GAAG,UACV,iBACEJ,aAAYd,EAAKe,cAAcnC,EAASI,QACxCmC,QAASvB,KAAKJ,kBACd4B,KAAOC,IACPL,MAAOhB,EAAKe,cAAcnC,EAASI,cAJrC,EAKC,YAAC,IAAD,CAAMkC,GAAG,kBAhFTI,UAAY,CACjBrB,QAASsB,IAAmBC,KAC5BtB,oBAAqBuB,IAAUC,OAC/BvB,uBAAwBsB,IAAUE,KAClC3B,KAAMyB,IAAUG,OAChBxB,gBAAiBqB,IAAUI,KAC3B/B,SAAU2B,IAAUI,KAAKC,Y,sBCjD7B,MAAMlD,EAAWC,YAAe,CAC9BkD,cAAc,CAAD,sFACbC,cAAc,CAAD,8DA2BA1C,I,EAAAA,cAAW2C,mBAxBFC,IACf,CACLjC,QAASiC,EAAMC,MAAM,CAAC,WAAY,YAClCjC,oBAAqBgC,EAAMC,MAAM,CAAC,gBAAiB,WACnDhC,uBAAwB+B,EAAMC,MAAM,CAAC,iBAAkB,gBAAiB,kBAIjD,CAACC,EAAD,SAAW,KAAEpC,GAAb,QAAyB,CAClDI,gBAAiBX,GACfA,EAAEC,iBACFD,EAAEE,kBACFyC,EAASC,YAAU,WAAY,MAEjCvC,WACEsC,EAASC,YAAU,UAAW,CAC5BC,QAAStC,EAAKe,cAAcnC,EAASmD,eACrCQ,QAASvC,EAAKe,cAAcnC,EAASoD,eACrCQ,kBAAkB,EAClBC,UAAW,IAAMzD,qBAKGiD,CAA6C5C,IClBvE,MAAMT,EAAWC,YAAe,CAC9B6D,QAAQ,CAAD,iE,IAwBHC,EAFUV,mBAnBQ,CAACC,EAAOU,KAAR,CACtBC,UAAWX,EAAMC,MAAM,CAAC,UAAW,cACnCW,WAAYF,EAASG,YAAcb,EAAMC,MAAM,CAAC,SAAU,gBAAkBD,EAAMC,MAAM,CAAC,SAAU,WAAaS,EAASI,iBAGhG,CAACZ,EAAD,SAAW,KAAEpC,GAAb,QAAyB,CAClDiD,mBACEb,EAASc,iBAGXC,UACEf,EAASgB,iBAGXC,YACEjB,EAASkB,oB,GAKZhE,Y,EADc,cAEOiE,IAAMC,cAY1BC,oBACE,MAAM,aAAET,GAAiBpD,KAAKC,MAEzBmD,GACHpD,KAAKC,MAAMsD,UAIfO,uBACE,MAAM,aAAEV,GAAiBpD,KAAKC,MAEzBmD,GACHpD,KAAKC,MAAMwD,YAIftD,SACE,MAAM,UACJ8C,EADI,KAEJ7C,EAFI,YAGJ+C,EAHI,iBAIJE,EAJI,aAKJD,EALI,WAMJF,GACElD,KAAKC,MACH8D,EAAgBC,IAAW,SAAD,YAAuBf,GAEvD,OACE,mBAAKjC,UAAW+C,EAAeE,KAAK,SAAS/C,aAAYd,EAAKe,cAAcnC,EAAS8D,eAArF,EACGK,GAAe,YAAC,EAAD,KAEdA,GAAeC,IAAiB,YAAC,IAAD,IAElC,mBAAKpC,UAAU,sBAAf,GACIoC,GAAgB,mBAAKpC,UAAU,sBAAf,EAChB,YAAC,IAAD,IAEA,YAAC,IAAD,IAEA,mBAAKA,UAAU,gCAAf,EACGkD,SAAS,mBAAKC,IAAI,GAAGC,UAAU,QAAQC,IAAKH,WAAa,sBAAQlD,UAAU,WAAWO,QAAS8B,MAIpG,YAAC,IAAD,CAAQiB,aAAc,CAAEC,EAAGnB,EAAe,GAAK,KAAOoB,MAAO,CAAED,EAAGE,IAAOvB,GAAcE,EAAe,GAAK,IAAK,CAAEsB,UAAW,IAAKC,QAAS,YAA3I,GACG,QAAC,EAAEJ,GAAH,SACC,mBAAKvD,UAAU,uBAAuBwD,MAAO,CAAEI,UAAU,cAAeL,EAAhB,KAAuBM,YAAmB,MAAPN,EAAa,SAAW,iBAAnH,EACE,YAAC,IAAD,c","file":"js/flavours/glitch/async/compose-bd393d6c493ecd1f0913.chunk.js","sourcesContent":["//  Package imports.\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\n//  Components.\nimport Icon from 'flavours/glitch/components/icon';\n\n//  Utils.\nimport { conditionalRender } from 'flavours/glitch/util/react_helpers';\nimport { signOutLink } from 'flavours/glitch/util/backend_links';\n\n//  Messages.\nconst messages = defineMessages({\n  community: {\n    defaultMessage: 'Local timeline',\n    id: 'navigation_bar.community_timeline',\n  },\n  home_timeline: {\n    defaultMessage: 'Home',\n    id: 'tabs_bar.home',\n  },\n  logout: {\n    defaultMessage: 'Logout',\n    id: 'navigation_bar.logout',\n  },\n  notifications: {\n    defaultMessage: 'Notifications',\n    id: 'tabs_bar.notifications',\n  },\n  public: {\n    defaultMessage: 'Federated timeline',\n    id: 'navigation_bar.public_timeline',\n  },\n  settings: {\n    defaultMessage: 'App settings',\n    id: 'navigation_bar.app_settings',\n  },\n  start: {\n    defaultMessage: 'Getting started',\n    id: 'getting_started.heading',\n  },\n});\n\nexport default @injectIntl\nclass Header extends ImmutablePureComponent {\n  static propTypes = {\n    columns: ImmutablePropTypes.list,\n    unreadNotifications: PropTypes.number,\n    showNotificationsBadge: PropTypes.bool,\n    intl: PropTypes.object,\n    onSettingsClick: PropTypes.func,\n    onLogout: PropTypes.func.isRequired,\n  };\n\n  handleLogoutClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.props.onLogout();\n\n    return false;\n  }\n\n  render () {\n    const { intl, columns, unreadNotifications, showNotificationsBadge, onSettingsClick } = this.props;\n\n    //  Only renders the component if the column isn't being shown.\n    const renderForColumn = conditionalRender.bind(null,\n      columnId => !columns || !columns.some(\n        column => column.get('id') === columnId\n      )\n    );\n\n    //  The result.\n    return (\n      <nav className='drawer--header'>\n        <Link\n          aria-label={intl.formatMessage(messages.start)}\n          title={intl.formatMessage(messages.start)}\n          to='/getting-started'\n        ><Icon id='asterisk' /></Link>\n        {renderForColumn('HOME', (\n          <Link\n            aria-label={intl.formatMessage(messages.home_timeline)}\n            title={intl.formatMessage(messages.home_timeline)}\n            to='/home'\n          ><Icon id='home' /></Link>\n        ))}\n        {renderForColumn('NOTIFICATIONS', (\n          <Link\n            aria-label={intl.formatMessage(messages.notifications)}\n            title={intl.formatMessage(messages.notifications)}\n            to='/notifications'\n          >\n            <span className='icon-badge-wrapper'>\n              <Icon id='bell' />\n              { showNotificationsBadge && unreadNotifications > 0 && <div className='icon-badge' />}\n            </span>\n          </Link>\n        ))}\n        {renderForColumn('COMMUNITY', (\n          <Link\n            aria-label={intl.formatMessage(messages.community)}\n            title={intl.formatMessage(messages.community)}\n            to='/public/local'\n          ><Icon id='users' /></Link>\n        ))}\n        {renderForColumn('PUBLIC', (\n          <Link\n            aria-label={intl.formatMessage(messages.public)}\n            title={intl.formatMessage(messages.public)}\n            to='/public'\n          ><Icon id='globe' /></Link>\n        ))}\n        <a\n          aria-label={intl.formatMessage(messages.settings)}\n          onClick={onSettingsClick}\n          href='/settings/preferences'\n          title={intl.formatMessage(messages.settings)}\n        ><Icon id='cogs' /></a>\n        <a\n          aria-label={intl.formatMessage(messages.logout)}\n          onClick={this.handleLogoutClick}\n          href={ signOutLink }\n          title={intl.formatMessage(messages.logout)}\n        ><Icon id='sign-out' /></a>\n      </nav>\n    );\n  };\n}\n","import { openModal } from 'flavours/glitch/actions/modal';\nimport { connect }   from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport Header from '../components/header';\nimport { logout } from 'lily/utils/auth';\n\nconst messages = defineMessages({\n  logoutMessage: { id: 'confirmations.logout.message', defaultMessage: 'Are you sure you want to log out?' },\n  logoutConfirm: { id: 'confirmations.logout.confirm', defaultMessage: 'Log out' },\n});\n\nconst mapStateToProps = state => {\n  return {\n    columns: state.getIn(['settings', 'columns']),\n    unreadNotifications: state.getIn(['notifications', 'unread']),\n    showNotificationsBadge: state.getIn(['local_settings', 'notifications', 'tab_badge']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onSettingsClick (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch(openModal('SETTINGS', {}));\n  },\n  onLogout () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.logoutMessage),\n      confirm: intl.formatMessage(messages.logoutConfirm),\n      closeWhenConfirm: false,\n      onConfirm: () => logout(),\n    }));\n  },\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Header));\n","import React from 'react';\nimport ComposeFormContainer from './containers/compose_form_container';\nimport NavigationContainer from './containers/navigation_container';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { mountCompose, unmountCompose } from 'flavours/glitch/actions/compose';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport classNames from 'classnames';\nimport SearchContainer from './containers/search_container';\nimport Motion from 'flavours/glitch/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\nimport SearchResultsContainer from './containers/search_results_container';\nimport { me, mascot } from 'flavours/glitch/util/initial_state';\nimport { cycleElefriendCompose } from 'flavours/glitch/actions/compose';\nimport HeaderContainer from './containers/header_container';\n\nconst messages = defineMessages({\n  compose: { id: 'navigation_bar.compose', defaultMessage: 'Compose new post' },\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n  elefriend: state.getIn(['compose', 'elefriend']),\n  showSearch: ownProps.multiColumn ? state.getIn(['search', 'submitted']) && !state.getIn(['search', 'hidden']) : ownProps.isSearchPage,\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onClickElefriend () {\n    dispatch(cycleElefriendCompose());\n  },\n\n  onMount () {\n    dispatch(mountCompose());\n  },\n\n  onUnmount () {\n    dispatch(unmountCompose());\n  },\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Compose extends React.PureComponent {\n  static propTypes = {\n    multiColumn: PropTypes.bool,\n    showSearch: PropTypes.bool,\n    isSearchPage: PropTypes.bool,\n    elefriend: PropTypes.number,\n    onClickElefriend: PropTypes.func,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount () {\n    const { isSearchPage } = this.props;\n\n    if (!isSearchPage) {\n      this.props.onMount();\n    }\n  }\n\n  componentWillUnmount () {\n    const { isSearchPage } = this.props;\n\n    if (!isSearchPage) {\n      this.props.onUnmount();\n    }\n  }\n\n  render () {\n    const {\n      elefriend,\n      intl,\n      multiColumn,\n      onClickElefriend,\n      isSearchPage,\n      showSearch,\n    } = this.props;\n    const computedClass = classNames('drawer', `mbstobon-${elefriend}`);\n\n    return (\n      <div className={computedClass} role='region' aria-label={intl.formatMessage(messages.compose)}>\n        {multiColumn && <HeaderContainer />}\n\n        {(multiColumn || isSearchPage) && <SearchContainer />}\n\n        <div className='drawer__pager'>\n          {!isSearchPage && <div className='drawer__inner'>\n            <NavigationContainer />\n\n            <ComposeFormContainer />\n\n            <div className='drawer__inner__mastodon'>\n              {mascot ? <img alt='' draggable='false' src={mascot} /> : <button className='mastodon' onClick={onClickElefriend} />}\n            </div>\n          </div>}\n\n          <Motion defaultStyle={{ x: isSearchPage ? 0 : -100 }} style={{ x: spring(showSearch || isSearchPage ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) => (\n              <div className='drawer__inner darker' style={{ transform: `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                <SearchResultsContainer />\n              </div>\n            )}\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}