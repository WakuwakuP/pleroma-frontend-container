{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/reblogs/index.js"],"names":["messages","defineMessages","heading","refresh","Reblogs","connect","state","props","accountIds","getIn","params","statusId","injectIntl","ImmutablePureComponent","handleHeaderClick","this","column","scrollTop","setRef","c","handleRefresh","dispatch","fetchReblogs","componentWillMount","componentWillReceiveProps","nextProps","render","intl","multiColumn","emptyMessage","id","defaultMessage","ref","icon","title","formatMessage","onClick","showBackButton","extraButton","className","aria-label","scrollKey","bindToDocument","map","withNote","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"kSAcA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,sDACPC,QAAQ,CAAD,yC,IASHC,EAFUC,mBAJQ,CAACC,EAAOC,KAAR,CACtBC,WAAYF,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,c,GAIrEC,c,EADc,cAEOC,IAAwB,cAAD,yBAsB3CC,kBAAoB,KAClBC,KAAKC,OAAOC,aAvB6B,KA0B3CC,OAASC,IACPJ,KAAKC,OAASG,GA3B2B,KA8B3CC,cAAgB,KACdL,KAAKR,MAAMc,SAASC,YAAaP,KAAKR,MAAMG,OAAOC,YArBrDY,qBACOR,KAAKR,MAAMC,YACdO,KAAKR,MAAMc,SAASC,YAAaP,KAAKR,MAAMG,OAAOC,WAIvDa,0BAA0BC,GACpBA,EAAUf,OAAOC,WAAaI,KAAKR,MAAMG,OAAOC,UAAYc,EAAUf,OAAOC,UAC/EI,KAAKR,MAAMc,SAASC,YAAaG,EAAUf,OAAOC,WAgBtDe,SACE,MAAM,KAAEC,EAAF,WAAQnB,EAAR,YAAoBoB,GAAgBb,KAAKR,MAE/C,IAAKC,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,MAAMqB,EAAe,YAAC,IAAD,CAAkBC,GAAG,uBAAuBC,eAAe,iFAEhF,OACE,kBAAC,IAAD,CAAQC,IAAKjB,KAAKG,QAChB,YAAC,IAAD,CACEe,KAAK,UACLC,MAAOP,EAAKQ,cAAcnC,EAASE,SACnCkC,QAASrB,KAAKD,kBACduB,gBAAc,EACdT,YAAaA,EACbU,YACE,sBAAQC,UAAU,wBAAwBL,MAAOP,EAAKQ,cAAcnC,EAASG,SAAUqC,aAAYb,EAAKQ,cAAcnC,EAASG,SAAUiC,QAASrB,KAAKK,oBAAvJ,EAAsK,YAAC,IAAD,CAAMU,GAAG,eAInL,YAAC,IAAD,CACEW,UAAU,UACVZ,aAAcA,EACda,gBAAiBd,QAHnB,EAKGpB,EAAWmC,KAAIb,GACd,YAAC,IAAD,CAA2BA,GAAIA,EAAIc,UAAU,GAAtBd,UAhE1Be,UAAY,CACjBnC,OAAQoC,IAAUC,OAAOC,WACzB3B,SAAUyB,IAAUG,KAAKD,WACzBxC,WAAY0C,IAAmBC,KAC/BvB,YAAakB,IAAUM,KACvBzB,KAAMmB,IAAUC,OAAOC,Y","file":"js/flavours/glitch/async/reblogs-3e40b7576ccd3f7e4107.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { fetchReblogs } from 'flavours/glitch/actions/interactions';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport Icon from 'flavours/glitch/components/icon';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.reblogged_by', defaultMessage: 'Boosted by' },\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchReblogs(nextProps.params.statusId));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n  }\n\n  render () {\n    const { intl, accountIds, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has boosted this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='retweet'\n          title={intl.formatMessage(messages.heading)}\n          onClick={this.handleHeaderClick}\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='reblogs'\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}