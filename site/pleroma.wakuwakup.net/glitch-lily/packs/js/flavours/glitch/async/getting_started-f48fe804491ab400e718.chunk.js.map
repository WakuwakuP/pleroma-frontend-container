{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/getting_started/index.js"],"names":["messages","defineMessages","heading","home_timeline","notifications","public_timeline","navigation_subheading","settings_subheading","community_timeline","direct","bookmarks","preferences","settings","follow_requests","lists","keyboard_shortcuts","lists_subheading","misc","menu","profile_directory","badgeDisplay","number","limit","GettingStarted","connect","getOrderedLists","createSelector","state","get","toList","filter","item","sort","a","b","localeCompare","myAccount","getIn","me","columns","unreadFollowRequests","ImmutableList","size","unreadNotifications","dispatch","fetchFollowRequests","fetchLists","openSettings","openModal","injectIntl","ImmutablePureComponent","componentWillMount","this","props","componentDidMount","multiColumn","window","innerWidth","context","router","history","replace","render","intl","navItems","listItems","find","push","icon","text","formatMessage","to","badge","concat","list","map","Number","toString","bindToDocument","name","label","hideHeadingOnMobile","className","account","undefined","preferencesLink","href","onClick","showTrends","contextTypes","PropTypes","object","isRequired","propTypes","ImmutablePropTypes","bool","func"],"mappings":"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","file":"js/flavours/glitch/async/getting_started-f48fe804491ab400e718.chunk.js","sourcesContent":["import React from 'react';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnLink from 'flavours/glitch/features/ui/components/column_link';\nimport ColumnSubheading from 'flavours/glitch/features/ui/components/column_subheading';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me, profile_directory, showTrends } from 'flavours/glitch/util/initial_state';\nimport { fetchFollowRequests } from 'flavours/glitch/actions/accounts';\nimport { List as ImmutableList } from 'immutable';\nimport { createSelector } from 'reselect';\nimport { fetchLists } from 'flavours/glitch/actions/lists';\nimport { preferencesLink } from 'flavours/glitch/util/backend_links';\nimport NavigationBar from '../compose/components/navigation_bar';\nimport LinkFooter from 'flavours/glitch/features/ui/components/link_footer';\nimport TrendsContainer from './containers/trends_container';\n\nconst messages = defineMessages({\n  heading: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n  home_timeline: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n  notifications: { id: 'tabs_bar.notifications', defaultMessage: 'Notifications' },\n  public_timeline: { id: 'navigation_bar.public_timeline', defaultMessage: 'Federated timeline' },\n  navigation_subheading: { id: 'column_subheading.navigation', defaultMessage: 'Navigation' },\n  settings_subheading: { id: 'column_subheading.settings', defaultMessage: 'Settings' },\n  community_timeline: { id: 'navigation_bar.community_timeline', defaultMessage: 'Local timeline' },\n  direct: { id: 'navigation_bar.direct', defaultMessage: 'Direct messages' },\n  bookmarks: { id: 'navigation_bar.bookmarks', defaultMessage: 'Bookmarks' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  settings: { id: 'navigation_bar.app_settings', defaultMessage: 'App settings' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  keyboard_shortcuts: { id: 'navigation_bar.keyboard_shortcuts', defaultMessage: 'Keyboard shortcuts' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  lists_subheading: { id: 'column_subheading.lists', defaultMessage: 'Lists' },\n  misc: { id: 'navigation_bar.misc', defaultMessage: 'Misc' },\n  menu: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n  profile_directory: { id: 'getting_started.directory', defaultMessage: 'Profile directory' },\n});\n\nconst makeMapStateToProps = () => {\n  const getOrderedLists = createSelector([state => state.get('lists')], lists => {\n    if (!lists) {\n      return lists;\n    }\n\n    return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n  });\n\n  const mapStateToProps = state => ({\n    lists: getOrderedLists(state),\n    myAccount: state.getIn(['accounts', me]),\n    columns: state.getIn(['settings', 'columns']),\n    unreadFollowRequests: state.getIn(['user_lists', 'follow_requests', 'items'], ImmutableList()).size,\n    unreadNotifications: state.getIn(['notifications', 'unread']),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFollowRequests: () => dispatch(fetchFollowRequests()),\n  fetchLists: () => dispatch(fetchLists()),\n  openSettings: () => dispatch(openModal('SETTINGS', {})),\n});\n\nconst badgeDisplay = (number, limit) => {\n  if (number === 0) {\n    return undefined;\n  } else if (limit && number >= limit) {\n    return `${limit}+`;\n  } else {\n    return number;\n  }\n};\n\nconst NAVIGATION_PANEL_BREAKPOINT = 600 + (285 * 2) + (10 * 2);\n\n export default @connect(makeMapStateToProps, mapDispatchToProps)\n @injectIntl\n class GettingStarted extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    myAccount: ImmutablePropTypes.map.isRequired,\n    columns: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    fetchFollowRequests: PropTypes.func.isRequired,\n    unreadFollowRequests: PropTypes.number,\n    unreadNotifications: PropTypes.number,\n    lists: ImmutablePropTypes.list,\n    fetchLists: PropTypes.func.isRequired,\n    openSettings: PropTypes.func.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.fetchLists();\n  }\n\n  componentDidMount () {\n    const { fetchFollowRequests, multiColumn } = this.props;\n\n    if (!multiColumn && window.innerWidth >= NAVIGATION_PANEL_BREAKPOINT) {\n      this.context.router.history.replace('/home');\n      return;\n    }\n\n    fetchFollowRequests();\n  }\n\n  render () {\n    const { intl, myAccount, columns, multiColumn, unreadFollowRequests, unreadNotifications, lists, openSettings } = this.props;\n\n    const navItems = [];\n    let listItems = [];\n\n    if (multiColumn) {\n      if (!columns.find(item => item.get('id') === 'HOME')) {\n        navItems.push(<ColumnLink key='0' icon='home' text={intl.formatMessage(messages.home_timeline)} to='/home' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'NOTIFICATIONS')) {\n        navItems.push(<ColumnLink key='1' icon='bell' text={intl.formatMessage(messages.notifications)} badge={badgeDisplay(unreadNotifications)} to='/notifications' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'COMMUNITY')) {\n        navItems.push(<ColumnLink key='2' icon='users' text={intl.formatMessage(messages.community_timeline)} to='/public/local' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'PUBLIC')) {\n        navItems.push(<ColumnLink key='3' icon='globe' text={intl.formatMessage(messages.public_timeline)} to='/public' />);\n      }\n    }\n\n    if (!multiColumn || !columns.find(item => item.get('id') === 'DIRECT')) {\n      navItems.push(<ColumnLink key='4' icon='envelope' text={intl.formatMessage(messages.direct)} to='/conversations' />);\n    }\n\n    if (!multiColumn || !columns.find(item => item.get('id') === 'BOOKMARKS')) {\n      navItems.push(<ColumnLink key='5' icon='bookmark' text={intl.formatMessage(messages.bookmarks)} to='/bookmarks' />);\n    }\n\n    if (myAccount.get('locked') || unreadFollowRequests > 0) {\n      navItems.push(<ColumnLink key='6' icon='user-plus' text={intl.formatMessage(messages.follow_requests)} badge={badgeDisplay(unreadFollowRequests, 40)} to='/follow_requests' />);\n    }\n\n    if (profile_directory) {\n      navItems.push(<ColumnLink key='7' icon='address-book' text={intl.formatMessage(messages.profile_directory)} to='/directory' />);\n    }\n\n    navItems.push(<ColumnLink key='8' icon='ellipsis-h' text={intl.formatMessage(messages.misc)} to='/getting-started-misc' />);\n\n    listItems = listItems.concat([\n      <div key='9'>\n        <ColumnLink key='10' icon='bars' text={intl.formatMessage(messages.lists)} to='/lists' />\n        {lists.filter(list => !columns.find(item => item.get('id') === 'LIST' && item.getIn(['params', 'id']) === list.get('id'))).map(list =>\n          <ColumnLink key={(11 + Number(list.get('id'))).toString()} to={`/lists/${list.get('id')}`} icon='list-ul' text={list.get('title')} />\n        )}\n      </div>,\n    ]);\n\n    return (\n      <Column bindToDocument={!multiColumn} name='getting-started' icon='asterisk' heading={intl.formatMessage(messages.heading)} label={intl.formatMessage(messages.menu)} hideHeadingOnMobile>\n        <div className='scrollable optionally-scrollable'>\n          <div className='getting-started__wrapper'>\n            {!multiColumn && <NavigationBar account={myAccount} />}\n            {multiColumn && <ColumnSubheading text={intl.formatMessage(messages.navigation_subheading)} />}\n            {navItems}\n            <ColumnSubheading text={intl.formatMessage(messages.lists_subheading)} />\n            {listItems}\n            <ColumnSubheading text={intl.formatMessage(messages.settings_subheading)} />\n            { preferencesLink !== undefined && <ColumnLink icon='cog' text={intl.formatMessage(messages.preferences)} href={preferencesLink} /> }\n            <ColumnLink icon='cogs' text={intl.formatMessage(messages.settings)} onClick={openSettings} />\n          </div>\n\n          <LinkFooter />\n        </div>\n\n        {multiColumn && showTrends && <TrendsContainer />}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}