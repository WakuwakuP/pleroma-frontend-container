{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/blocks/index.js"],"names":["messages","defineMessages","heading","Blocks","connect","state","accountIds","getIn","hasMore","isLoading","injectIntl","ImmutablePureComponent","handleLoadMore","this","props","dispatch","expandBlocks","leading","componentWillMount","fetchBlocks","render","intl","multiColumn","emptyMessage","id","defaultMessage","name","bindToDocument","icon","formatMessage","scrollKey","onLoadMore","map","defaultAction","propTypes","params","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"mSAcA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,qD,IAWHC,EAFUC,mBANQC,IAAK,CAC3BC,WAAYD,EAAME,MAAM,CAAC,aAAc,SAAU,UACjDC,UAAWH,EAAME,MAAM,CAAC,aAAc,SAAU,SAChDE,UAAWJ,EAAME,MAAM,CAAC,aAAc,SAAU,cAAc,M,GAI/DG,c,EADc,cAEMC,IAAwB,cAAD,yBAgB1CC,eAAiB,KAAS,KACxBC,KAAKC,MAAMC,SAASC,iBACnB,IAAK,CAAEC,SAAS,IANnBC,qBACEL,KAAKC,MAAMC,SAASI,eAOtBC,SACE,MAAM,KAAEC,EAAF,WAAQf,EAAR,QAAoBE,EAApB,YAA6Bc,EAA7B,UAA0Cb,GAAcI,KAAKC,MAEnE,IAAKR,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,MAAMiB,EAAe,YAAC,IAAD,CAAkBC,GAAG,sBAAsBC,eAAe,uCAE/E,OACE,YAAC,IAAD,CAAQC,KAAK,SAASC,gBAAiBL,EAAaM,KAAK,MAAM1B,QAASmB,EAAKQ,cAAc7B,EAASE,eAApG,EACE,YAAC,IAAD,IACA,YAAC,IAAD,CACE4B,UAAU,SACVC,WAAYlB,KAAKD,eACjBJ,QAASA,EACTC,UAAWA,EACXc,aAAcA,EACdI,gBAAiBL,QANnB,EAQGhB,EAAW0B,KAAIR,GACd,YAAC,IAAD,CAA2BA,GAAIA,EAAIS,cAAc,SAA1BT,UA3C1BU,UAAY,CACjBC,OAAQC,IAAUC,OAAOC,WACzBvB,SAAUqB,IAAUG,KAAKD,WACzBhC,WAAYkC,IAAmBC,KAC/BjC,QAAS4B,IAAUM,KACnBjC,UAAW2B,IAAUM,KACrBrB,KAAMe,IAAUC,OAAOC,WACvBhB,YAAac,IAAUM,M","file":"js/flavours/glitch/async/blocks-25c7518f8109ff8e7e03.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnBackButtonSlim from 'flavours/glitch/components/column_back_button_slim';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport { fetchBlocks, expandBlocks } from 'flavours/glitch/actions/blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  heading: { id: 'column.blocks', defaultMessage: 'Blocked users' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['user_lists', 'blocks', 'next']),\n  isLoading: state.getIn(['user_lists', 'blocks', 'isLoading'], true),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.blocks' defaultMessage=\"You haven't blocked any users yet.\" />;\n\n    return (\n      <Column name='blocks' bindToDocument={!multiColumn} icon='ban' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} defaultAction='block' />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}