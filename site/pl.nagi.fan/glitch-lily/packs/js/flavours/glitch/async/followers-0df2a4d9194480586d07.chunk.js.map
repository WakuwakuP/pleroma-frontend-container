{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/followers/index.js"],"names":["RemoteHint","url","resource","id","defaultMessage","Followers","connect","state","params","acct","accountId","getIn","remote","remoteUrl","isAccount","accountIds","hasMore","isLoading","suspended","hidden","getAccountHidden","ImmutablePureComponent","handleLoadMore","this","props","dispatch","expandFollowers","leading","setRef","c","column","handleHeaderClick","scrollTop","_load","fetchAccount","fetchFollowers","componentDidMount","lookupAccount","componentDidUpdate","prevProps","render","multiColumn","emptyMessage","forceEmptyState","isEmpty","remoteMessage","ref","onClick","scrollKey","onLoadMore","prepend","hideTabs","alwaysPrepend","append","bindToDocument","map","withNote","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"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","file":"js/flavours/glitch/async/followers-0df2a4d9194480586d07.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowers,\n  expandFollowers,\n} from 'flavours/glitch/actions/accounts';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from 'flavours/glitch/features/account_timeline/containers/header_container';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport TimelineHint from 'flavours/glitch/components/timeline_hint';\nimport LimitedAccountHint from '../account_timeline/components/limited_account_hint';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', acct]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'followers', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'followers', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'followers', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.followers' defaultMessage='Followers' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass Followers extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowers(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowers(this.props.accountId));\n  }, 300, { leading: true });\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  render () {\n    const { accountId, accountIds, hasMore, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.followers.empty' defaultMessage='No one follows this user yet.' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef}>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='followers'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}