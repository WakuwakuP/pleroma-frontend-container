{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/follow.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/follow_request.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/containers/follow_request_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/admin_signup.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/report.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/admin_report.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/containers/admin_report_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/notification.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/containers/notification_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/clear_column_button.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/grant_permission_button.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/pill_bar_button.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/column_settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/filter_bar.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/components/notifications_permission_banner.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/components/notification_purge_buttons.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/containers/notification_purge_buttons_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/notifications/index.js"],"names":["NotificationFollow","ImmutablePureComponent","handleMoveUp","notification","onMoveUp","this","props","get","handleMoveDown","onMoveDown","handleOpen","handleOpenProfile","context","router","history","push","getIn","handleMention","e","preventDefault","onMention","getHandlers","moveUp","moveDown","open","openProfile","mention","reply","render","account","hidden","unread","displayName","link","className","href","title","to","dangerouslySetInnerHTML","__html","handlers","classNames","tabIndex","fixedWidth","id","defaultMessage","values","name","withNote","propTypes","PropTypes","bool","string","isRequired","ImmutablePropTypes","map","messages","defineMessages","authorize","reject","FollowRequest","injectIntl","intl","onAuthorize","onReject","size","formatMessage","icon","onClick","func","object","connect","dispatch","authorizeFollowRequest","rejectFollowRequest","openReport","other","spam","violation","Report","report","friend","timestamp","short","count","target","rel","adminReport","AdminReport","targetAccount","targetDisplayNameHtml","targetLink","state","getReport","makeGetReport","Notification","getScrollPosition","updateScrollBottom","containerId","contextType","cachedMediaWidth","cacheMediaWidth","onUnmount","withDismiss","prepend","muted","number","getNotification","makeGetNotification","accountId","notifCleaning","mentionCompose","ClearColumnButton","React","Component","GrantPermissionButton","PureComponent","PillBarButton","onChange","settings","settingPath","prefix","label","disabled","filter","Boolean","join","active","aria-pressed","ColumnSettings","onPushChange","path","checked","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","role","aria-labelledby","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","contextTypes","clearMessage","clearConfirm","permissionDenied","includes","window","permission","requestBrowserPermission","changePushNotifications","slice","showAlert","undefined","changeSetting","setFilter","openModal","message","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","close","NotificationsPermissionBanner","handleClick","handleClose","btnAll","btnNone","btnInvert","btnApply","NotificationPurgeButtons","markNewForDelete","onMarkAll","onMarkNone","onInvert","onDeleteMarked","onEnterCleaningMode","yes","enterNotificationClearingMode","deleteMarkedNotifications","markAllNotifications","enterNotifCleaning","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","localSettings","isLoading","isUnread","hasMore","numPending","notifCleaningActive","lastReadId","canMarkAsRead","some","compareId","needsNotificationPermission","onMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","onMount","mountNotifications","unmountNotifications","animatingNCD","handleLoadGap","maxId","expandNotifications","handleLoadOlder","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleTransitionEndNCD","setState","handleMarkAsRead","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","componentDidMount","componentWillUnmount","multiColumn","pinned","emptyMessage","scrollableContent","filterBarContainer","scrollContainer","scrollKey","trackScroll","showLoading","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","extraButtons","aria-label","notifCleaningButtonClassName","notifCleaningDrawerClassName","msgEnterNotifCleaning","notifCleaningDrawer","onTransitionEnd","ref","extraClasses","onPin","onMove","extraButton","appendContent","defaultProps"],"mappings":"8WAee,MAAMA,UAA2BC,IAAwB,cAAD,yBAUrEC,aAAe,KACb,MAAM,aAAEC,EAAF,SAAgBC,GAAaC,KAAKC,MACxCF,EAASD,EAAaI,IAAI,QAZyC,KAerEC,eAAiB,KACf,MAAM,aAAEL,EAAF,WAAgBM,GAAeJ,KAAKC,MAC1CG,EAAWN,EAAaI,IAAI,QAjBuC,KAoBrEG,WAAa,KACXL,KAAKM,qBArB8D,KAwBrEA,kBAAoB,KAClB,MAAM,aAAER,GAAiBE,KAAKC,MAC9BD,KAAKO,QAAQC,OAAOC,QAAQC,KAA5B,KAAsCZ,EAAaa,MAAM,CAAC,UAAW,WA1BF,KA6BrEC,cAAgBC,IACdA,EAAEC,iBAEF,MAAM,aAAEhB,EAAF,UAAgBiB,GAAcf,KAAKC,MACzCc,EAAUjB,EAAaI,IAAI,WAAYF,KAAKO,QAAQC,OAAOC,UAG7DO,cACE,MAAO,CACLC,OAAQjB,KAAKH,aACbqB,SAAUlB,KAAKG,eACfgB,KAAMnB,KAAKK,WACXe,YAAapB,KAAKM,kBAClBe,QAASrB,KAAKY,cACdU,MAAOtB,KAAKY,eAIhBW,SACE,MAAM,QAAEC,EAAF,aAAW1B,EAAX,OAAyB2B,EAAzB,OAAiCC,GAAW1B,KAAKC,MAGjD0B,EAAcH,EAAQtB,IAAI,sBAAwBsB,EAAQtB,IAAI,YAC9D0B,EACJ,4BAAK,YAAC,IAAD,CACHC,UAAU,6BACVC,KAAMN,EAAQtB,IAAI,OAClB6B,MAAOP,EAAQtB,IAAI,QACnB8B,GAAE,KAAOR,EAAQtB,IAAI,QACrB+B,wBAAyB,CAAEC,OAAQP,MAKvC,OACE,YAAC,UAAD,CAASQ,SAAUnC,KAAKgB,oBAAxB,EACE,mBAAKa,UAAWO,IAAW,6CAA8C,CAAEV,WAAWW,SAAS,UAA/F,EACE,mBAAKR,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMS,YAAU,EAACC,GAAG,eAGtB,YAAC,IAAD,CACEA,GAAG,sBACHC,eAAe,sBACfC,OAAQ,CAAEC,KAAMd,MAIpB,YAAC,IAAD,CAAkBH,OAAQA,EAAQc,GAAIf,EAAQtB,IAAI,MAAOyC,UAAU,IACnE,YAAC,IAAD,CAA8B7C,aAAcA,OA/EjCH,EAEZiD,UAAY,CACjBnB,OAAQoB,IAAUC,KAClBP,GAAIM,IAAUE,OAAOC,WACrBxB,QAASyB,IAAmBC,IAAIF,WAChClD,aAAcmD,IAAmBC,IAAIF,WACrCtB,OAAQmB,IAAUC,M,kCCRtB,MAAMK,EAAWC,YAAe,CAC9BC,UAAU,CAAD,0DACTC,OAAO,CAAD,sD,IAIFC,EADUC,c,EAAD,cACa5D,IAAwB,cAAD,yBAWjDC,aAAe,KACb,MAAM,aAAEC,EAAF,SAAgBC,GAAaC,KAAKC,MACxCF,EAASD,EAAaI,IAAI,QAbqB,KAgBjDC,eAAiB,KACf,MAAM,aAAEL,EAAF,WAAgBM,GAAeJ,KAAKC,MAC1CG,EAAWN,EAAaI,IAAI,QAlBmB,KAqBjDG,WAAa,KACXL,KAAKM,qBAtB0C,KAyBjDA,kBAAoB,KAClB,MAAM,aAAER,GAAiBE,KAAKC,MAC9BD,KAAKO,QAAQC,OAAOC,QAAQC,KAA5B,KAAsCZ,EAAaa,MAAM,CAAC,UAAW,WA3BtB,KA8BjDC,cAAgBC,IACdA,EAAEC,iBAEF,MAAM,aAAEhB,EAAF,UAAgBiB,GAAcf,KAAKC,MACzCc,EAAUjB,EAAaI,IAAI,WAAYF,KAAKO,QAAQC,OAAOC,UAG7DO,cACE,MAAO,CACLC,OAAQjB,KAAKH,aACbqB,SAAUlB,KAAKG,eACfgB,KAAMnB,KAAKK,WACXe,YAAapB,KAAKM,kBAClBe,QAASrB,KAAKY,cACdU,MAAOtB,KAAKY,eAIhBW,SACE,MAAM,KAAEkC,EAAF,OAAQhC,EAAR,QAAgBD,EAAhB,YAAyBkC,EAAzB,SAAsCC,EAAtC,aAAgD7D,EAAhD,OAA8D4B,GAAW1B,KAAKC,MAEpF,IAAKuB,EACH,OAAO,sBAGT,GAAIC,EACF,OACE,YAAC,WAAD,UACGD,EAAQtB,IAAI,gBACZsB,EAAQtB,IAAI,aAMnB,MAAMyB,EAAcH,EAAQtB,IAAI,sBAAwBsB,EAAQtB,IAAI,YAC9D0B,EACJ,4BAAK,YAAC,IAAD,CACHC,UAAU,6BACVC,KAAMN,EAAQtB,IAAI,OAClB6B,MAAOP,EAAQtB,IAAI,QACnB8B,GAAE,KAAOR,EAAQtB,IAAI,QACrB+B,wBAAyB,CAAEC,OAAQP,MAIvC,OACE,YAAC,UAAD,CAASQ,SAAUnC,KAAKgB,oBAAxB,EACE,mBAAKa,UAAWO,IAAW,qDAAsD,CAAEV,WAAWW,SAAS,UAAvG,EACE,mBAAKR,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMU,GAAG,OAAOD,YAAU,KAG5B,YAAC,IAAD,CACEC,GAAG,8BACHC,eAAe,qCACfC,OAAQ,CAAEC,KAAMd,MAIpB,mBAAKC,UAAU,gBAAf,EACE,mBAAKA,UAAU,yBAAf,EACE,YAAC,IAAD,CAAmCA,UAAU,wBAAwBE,MAAOP,EAAQtB,IAAI,QAAS4B,KAAMN,EAAQtB,IAAI,OAAQ8B,GAAE,KAAOR,EAAQtB,IAAI,SAAhIsB,EAAQtB,IAAI,MAC1B,mBAAK2B,UAAU,gCAAf,EAAyC,YAAC,IAAD,CAAQL,QAASA,EAASoC,KAAM,MACzE,YAAC,IAAD,CAAapC,QAASA,KAGxB,mBAAKK,UAAU,8BAAf,EACE,YAAC,IAAD,CAAYE,MAAO0B,EAAKI,cAAcV,EAASE,WAAYS,KAAK,QAAQC,QAASL,IACjF,YAAC,IAAD,CAAY3B,MAAO0B,EAAKI,cAAcV,EAASG,QAASQ,KAAK,QAAQC,QAASJ,OAKpF,YAAC,IAAD,CAA8B7D,aAAcA,SAvG7C8C,UAAY,CACjBpB,QAASyB,IAAmBC,IAAIF,WAChCU,YAAab,IAAUmB,KAAKhB,WAC5BW,SAAUd,IAAUmB,KAAKhB,WACzBS,KAAMZ,IAAUoB,OAAOjB,WACvBlD,aAAcmD,IAAmBC,IAAIF,WACrCtB,OAAQmB,IAAUC,M,qBCbPoB,wBAAQ,MAVI,CAACC,EAAD,SAAW,QAAE3C,GAAb,QAA4B,CACrDkC,cACES,EAASC,YAAuB5C,EAAQtB,IAAI,SAG9CyD,WACEQ,EAASE,aAAoB7C,EAAQtB,IAAI,YAI9BgE,CAAkCX,GCAlC,MAAM5D,UAA2BC,IAAwB,cAAD,yBAUrEC,aAAe,KACb,MAAM,aAAEC,EAAF,SAAgBC,GAAaC,KAAKC,MACxCF,EAASD,EAAaI,IAAI,QAZyC,KAerEC,eAAiB,KACf,MAAM,aAAEL,EAAF,WAAgBM,GAAeJ,KAAKC,MAC1CG,EAAWN,EAAaI,IAAI,QAjBuC,KAoBrEG,WAAa,KACXL,KAAKM,qBArB8D,KAwBrEA,kBAAoB,KAClB,MAAM,aAAER,GAAiBE,KAAKC,MAC9BD,KAAKO,QAAQC,OAAOC,QAAQC,KAA5B,KAAsCZ,EAAaa,MAAM,CAAC,UAAW,WA1BF,KA6BrEC,cAAgBC,IACdA,EAAEC,iBAEF,MAAM,aAAEhB,EAAF,UAAgBiB,GAAcf,KAAKC,MACzCc,EAAUjB,EAAaI,IAAI,WAAYF,KAAKO,QAAQC,OAAOC,UAG7DO,cACE,MAAO,CACLC,OAAQjB,KAAKH,aACbqB,SAAUlB,KAAKG,eACfgB,KAAMnB,KAAKK,WACXe,YAAapB,KAAKM,kBAClBe,QAASrB,KAAKY,cACdU,MAAOtB,KAAKY,eAIhBW,SACE,MAAM,QAAEC,EAAF,aAAW1B,EAAX,OAAyB2B,EAAzB,OAAiCC,GAAW1B,KAAKC,MAGjD0B,EAAcH,EAAQtB,IAAI,sBAAwBsB,EAAQtB,IAAI,YAC9D0B,EACJ,4BAAK,YAAC,IAAD,CACHC,UAAU,6BACVC,KAAMN,EAAQtB,IAAI,OAClB6B,MAAOP,EAAQtB,IAAI,QACnB8B,GAAE,KAAOR,EAAQtB,IAAI,QACrB+B,wBAAyB,CAAEC,OAAQP,MAKvC,OACE,YAAC,UAAD,CAASQ,SAAUnC,KAAKgB,oBAAxB,EACE,mBAAKa,UAAWO,IAAW,oDAAqD,CAAEV,WAAWW,SAAS,UAAtG,EACE,mBAAKR,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMS,YAAU,EAACC,GAAG,eAGtB,YAAC,IAAD,CACEA,GAAG,6BACHC,eAAe,mBACfC,OAAQ,CAAEC,KAAMd,MAIpB,YAAC,IAAD,CAAkBH,OAAQA,EAAQc,GAAIf,EAAQtB,IAAI,MAAOyC,UAAU,IACnE,YAAC,IAAD,CAA8B7C,aAAcA,OA/EjCH,EAEZiD,UAAY,CACjBnB,OAAQoB,IAAUC,KAClBP,GAAIM,IAAUE,OAAOC,WACrBxB,QAASyB,IAAmBC,IAAIF,WAChClD,aAAcmD,IAAmBC,IAAIF,WACrCtB,OAAQmB,IAAUC,M,2BCdtB,MAAMK,EAAWC,YAAe,CAC9BkB,WAAW,CAAD,4DACVC,MAAM,CAAD,kEACLC,KAAK,CAAD,gEACJC,UAAU,CAAD,iF,IAILC,EADUlB,c,EAAD,cACM5D,IASnB2B,SACE,MAAM,KAAEkC,EAAF,OAAQhC,EAAR,OAAgBkD,EAAhB,QAAwBnD,GAAYxB,KAAKC,MAE/C,OAAK0E,EAIDlD,EAEA,YAAC,WAAD,UACGkD,EAAOzE,IAAI,OAMhB,mBAAK2B,UAAU,6BAAf,EACE,mBAAKA,UAAU,qCAAf,EACE,YAAC,IAAD,CAAeL,QAASmD,EAAOzE,IAAI,kBAAmB0E,OAAQpD,KAGhE,mBAAKK,UAAU,sCAAf,EACE,4BACE,YAAC,UAAD,CAAmBgD,UAAWF,EAAOzE,IAAI,cAAe4E,OAAO,IADjE,MAC6E,YAAC,IAAD,CAAkBvC,GAAG,wCAAwCC,eAAe,qEAAqEC,OAAQ,CAAEsC,MAAOJ,EAAOzE,IAAI,cAAc0D,QACtQ,qBACA,+BAASH,EAAKI,cAAcV,EAASwB,EAAOzE,IAAI,gBAGlD,mBAAK2B,UAAU,sCAAf,EACE,iBAAGC,KAAI,kBAAoB6C,EAAOzE,IAAI,MAAS2B,UAAU,SAASmD,OAAO,SAASC,IAAI,4BAAtF,EAA6GxB,EAAKI,cAAcV,EAASmB,gBAzBxI,QAXJ1B,UAAY,CACjBpB,QAASyB,IAAmBC,IAAIF,WAChC2B,OAAQ1B,IAAmBC,IAAIF,WAC/BvB,OAAQoB,IAAUC,KAClBW,KAAMZ,IAAUoB,OAAOjB,Y,SCNVI,YAAe,CAC9B8B,YAAY,CAAD,4EAGE,MAAMC,UAAoBvF,IAAwB,cAAD,yBAW9DC,aAAe,KACb,MAAM,aAAEC,EAAF,SAAgBC,GAAaC,KAAKC,MACxCF,EAASD,EAAaI,IAAI,QAbkC,KAgB9DC,eAAiB,KACf,MAAM,aAAEL,EAAF,WAAgBM,GAAeJ,KAAKC,MAC1CG,EAAWN,EAAaI,IAAI,QAlBgC,KAqB9DG,WAAa,KACXL,KAAKM,qBAtBuD,KAyB9DA,kBAAoB,KAClB,MAAM,aAAER,GAAiBE,KAAKC,MAC9BD,KAAKO,QAAQC,OAAOC,QAAQC,KAA5B,KAAsCZ,EAAaa,MAAM,CAAC,UAAW,WA3BT,KA8B9DC,cAAgBC,IACdA,EAAEC,iBAEF,MAAM,aAAEhB,EAAF,UAAgBiB,GAAcf,KAAKC,MACzCc,EAAUjB,EAAaI,IAAI,WAAYF,KAAKO,QAAQC,OAAOC,UAG7DO,cACE,MAAO,CACLC,OAAQjB,KAAKH,aACbqB,SAAUlB,KAAKG,eACfgB,KAAMnB,KAAKK,WACXe,YAAapB,KAAKM,kBAClBe,QAASrB,KAAKY,cACdU,MAAOtB,KAAKY,eAIhBW,SACE,MAAM,KAAEkC,EAAF,QAAQjC,EAAR,aAAiB1B,EAAjB,OAA+B4B,EAA/B,OAAuCiD,GAAW3E,KAAKC,MAGvD0B,EAAcH,EAAQtB,IAAI,sBAAwBsB,EAAQtB,IAAI,YAC9D0B,EACJ,4BAAK,YAAC,IAAD,CACHC,UAAU,6BACVC,KAAMN,EAAQtB,IAAI,OAClB6B,MAAOP,EAAQtB,IAAI,QACnB8B,GAAE,KAAOR,EAAQtB,IAAI,QACrB+B,wBAAyB,CAAEC,OAAQP,MAIjCyD,EAAgBT,EAAOzE,IAAI,kBAC3BmF,EAAwB,CAAEnD,OAAQkD,EAAclF,IAAI,sBACpDoF,EAAa,4BAAK,YAAC,IAAD,CAAWzD,UAAU,6BAA6BC,KAAMsD,EAAclF,IAAI,OAAQ6B,MAAOqD,EAAclF,IAAI,QAAS8B,GAAE,KAAOoD,EAAclF,IAAI,QAAW+B,wBAAyBoD,KAE3M,OACE,YAAC,UAAD,CAASlD,SAAUnC,KAAKgB,oBAAxB,EACE,mBAAKa,UAAWO,IAAW,mDAAoD,CAAEV,WAAWW,SAAS,UAArG,EACE,mBAAKR,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMU,GAAG,OAAOD,YAAU,KAG5B,oBAAMP,MAAOjC,EAAaI,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBqC,GAAG,4BAA4BC,eAAe,2BAA2BC,OAAQ,CAAEC,KAAMd,EAAMoD,OAAQM,OAI7H,YAAC,EAAD,CAAQ9D,QAASA,EAASmD,OAAQ7E,EAAaI,IAAI,UAAWuB,OAAQzB,KAAKC,MAAMwB,SACjF,YAAC,IAAD,CAA8B3B,aAAcA,OAjFjCqF,EAEZvC,UAAY,CACjBnB,OAAQoB,IAAUC,KAClBP,GAAIM,IAAUE,OAAOC,WACrBxB,QAASyB,IAAmBC,IAAIF,WAChClD,aAAcmD,IAAmBC,IAAIF,WACrCtB,OAAQmB,IAAUC,KAClB6B,OAAQ1B,IAAmBC,IAAIF,YChBpBkB,yBARS,CAACqB,EAAD,KAA8B,IAAtB,aAAEzF,GAAmB,EACnD,MAAM0F,EAAYC,cAElB,MAAO,CACLd,OAAQ7E,EAAaI,IAAI,UAAYsF,EAAUD,EAAOzF,EAAaI,IAAI,UAAWJ,EAAaa,MAAM,CAAC,SAAU,iBAAkB,QAAU,QAIjIuD,CAAyBiB,GCCzB,MAAMO,UAAqB9F,IAgBxC2B,SACE,MAAM,OACJE,EADI,aAEJ3B,EAFI,WAGJM,EAHI,SAIJL,EAJI,UAKJgB,EALI,kBAMJ4E,EANI,mBAOJC,GACE5F,KAAKC,MAET,OAAOH,EAAaI,IAAI,SACxB,IAAK,SACH,OACE,YAAC,EAAD,CACEuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,MACrBsB,QAAS1B,EAAaI,IAAI,WAC1BJ,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACXW,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,iBACH,OACE,YAAC,EAAD,CACED,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,MACrBsB,QAAS1B,EAAaI,IAAI,WAC1BJ,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACXW,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,gBACH,OACE,YAAC,EAAD,CACED,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,MACrBsB,QAAS1B,EAAaI,IAAI,WAC1BJ,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACXW,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,eACH,OACE,YAAC,EAAD,CACED,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,MACrBsB,QAAS1B,EAAaI,IAAI,WAC1BJ,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACXW,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,UACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBJ,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX+E,YAAY,gBACZH,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,SACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBsB,QAAS1B,EAAaI,IAAI,WAC1BiG,QAAQ,SACRC,OAAK,EACLtG,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX4E,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,YACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBsB,QAAS1B,EAAaI,IAAI,WAC1BiG,QAAQ,YACRC,OAAK,EACLtG,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX4E,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,SACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBsB,QAAS1B,EAAaI,IAAI,WAC1BiG,QAAQ,SACRC,OAAK,EACLtG,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX4E,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,OACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBsB,QAAS1B,EAAaI,IAAI,WAC1BiG,QAAQ,OACRC,OAAK,EACLtG,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX4E,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,IAAK,SACH,OACE,YAAC,IAAD,CACEmE,YAAa/F,EAAaI,IAAI,MAC9BuB,OAAQA,EACRc,GAAIzC,EAAaI,IAAI,UACrBsB,QAAS1B,EAAaI,IAAI,WAC1BiG,QAAQ,SACRC,OAAK,EACLtG,aAAcA,EACdM,WAAYA,EACZL,SAAUA,EACVgB,UAAWA,EACX4E,kBAAmBA,EACnBC,mBAAoBA,EACpBG,iBAAkB/F,KAAKC,MAAM8F,iBAC7BC,gBAAiBhG,KAAKC,MAAM+F,gBAC5BC,UAAWjG,KAAKC,MAAMgG,UACtBC,aAAW,EACXxE,OAAQ1B,KAAKC,MAAMyB,SAGzB,QACE,OAAO,OAnNQgE,EAEZ9C,UAAY,CACjB9C,aAAcmD,IAAmBC,IAAIF,WACrCvB,OAAQoB,IAAUC,KAClB/C,SAAU8C,IAAUmB,KAAKhB,WACzB5C,WAAYyC,IAAUmB,KAAKhB,WAC3BjC,UAAW8B,IAAUmB,KAAKhB,WAC1B2C,kBAAmB9C,IAAUmB,KAC7B4B,mBAAoB/C,IAAUmB,KAC9BgC,gBAAiBnD,IAAUmB,KAC3B+B,iBAAkBlD,IAAUwD,OAC5BJ,UAAWpD,IAAUmB,KACrBtC,OAAQmB,IAAUC,M,YCDPoB,yBAjBa,KAC1B,MAAMoC,EAAkBC,cAOxB,MALwB,CAAChB,EAAOtF,KAAR,CACtBH,aAAcwG,EAAgBf,EAAOtF,EAAMH,aAAcG,EAAMuG,WAC/DC,cAAelB,EAAM5E,MAAM,CAAC,gBAAiB,sBAMtBwD,IAAQ,CACjCpD,UAAW,CAACS,EAAShB,KACnB2D,EAASuC,aAAelF,EAAShB,QAItB0D,CAAiDwB,GCpBjD,MAAMiB,UAA0BC,IAAMC,UAMnDtF,SACE,OACE,sBAAQM,UAAU,sCAAsCQ,SAAS,IAAI0B,QAAS/D,KAAKC,MAAM8D,cAAzF,EAAkG,YAAC,IAAD,CAAMxB,GAAG,WAA3G,IAAuH,YAAC,IAAD,CAAkBA,GAAG,sBAAsBC,eAAe,0BCTxK,MAAMsE,UAA8BF,IAAMG,cAMvDxF,SACE,OACE,sBAAQM,UAAU,yCAAyCQ,SAAS,IAAI0B,QAAS/D,KAAKC,MAAM8D,cAA5F,EACE,YAAC,IAAD,CAAkBxB,GAAG,iCAAiCC,eAAe,wB,cCR9D,MAAMwE,WAAsBJ,IAAMG,cAAe,cAAD,yBAW7DE,SAAW,KACT,MAAM,SAAEC,EAAF,YAAYC,GAAgBnH,KAAKC,MACvCD,KAAKC,MAAMgH,SAASE,GAAcD,EAASvG,MAAMwG,KAGnD5F,SACE,MAAM,OAAE6F,EAAF,SAAUF,EAAV,YAAoBC,EAApB,MAAiCE,EAAjC,SAAwCC,GAAatH,KAAKC,MAC1DsC,EAAK,CAAC,yBAA0B6E,KAAWD,GAAaI,OAAOC,SAASC,KAAK,KAC7EC,EAASR,EAASvG,MAAMwG,GAE9B,OACE,sBAEE5E,GAAIA,EACJV,UAAWO,IAAW,iBAAkB,CAAEsF,WAC1CJ,SAAUA,EACVvD,QAAS/D,KAAKiH,SACdU,eAAcD,GALTnF,EAOJ8E,I,eCzBM,MAAMO,WAAuBhB,IAAMG,cAAe,cAAD,yBAiB9Dc,aAAe,CAACC,EAAMC,KACpB/H,KAAKC,MAAMgH,SAAS,CAAC,UAAWa,GAAOC,IAGzCxG,SACE,MAAM,SAAE2F,EAAF,aAAYc,EAAZ,SAA0Bf,EAA1B,QAAoCgB,EAApC,cAA6CC,EAA7C,eAA4DC,EAA5D,kBAA4EC,EAA5E,gCAA+FC,GAAoCrI,KAAKC,MAExIqI,EAAuB,YAAC,IAAD,CAAkB/F,GAAG,+DAA+DC,eAAe,mCAC1H+F,EAAmB,YAAC,IAAD,CAAkBhG,GAAG,oDAAoDC,eAAe,oBAC3GgG,EAAoB,YAAC,IAAD,CAAkBjG,GAAG,oDAAoDC,eAAe,2BAC5GiG,EAAW,YAAC,IAAD,CAAkBlG,GAAG,sCAAsCC,eAAe,0BACrFkG,EAAU,YAAC,IAAD,CAAkBnG,GAAG,qCAAqCC,eAAe,mBACnFmG,EAAW,YAAC,IAAD,CAAkBpG,GAAG,sCAAsCC,eAAe,eAErFoG,EAAmBZ,EAAa9H,IAAI,mBAAqB8H,EAAa9H,IAAI,gBAC1E2I,EAAUD,GAAoB,YAAC,IAAD,CAAkBrG,GAAG,qCAAqCC,eAAe,uBAE7G,OACE,4BACG0F,GAAiBC,GAAwC,WAAtBC,GAClC,mBAAKvG,UAAU,+DAAf,EACE,oBAAMA,UAAU,qBAAhB,EAA+B,YAAC,IAAD,CAAkBU,GAAG,kCAAkCC,eAAe,iGAIxG0F,GAAiBC,GAAwC,YAAtBC,GAClC,mBAAKvG,UAAU,+DAAf,EACE,oBAAMA,UAAU,qBAAhB,EACE,YAAC,IAAD,CAAkBU,GAAG,oCAAoCC,eAAe,gGAD1E,IAC2K,YAAC,EAAD,CAAuBuB,QAASsE,MAK/M,mBAAKxG,UAAU,6BAAf,EACE,YAAC,EAAD,CAAmBkC,QAASkE,KAG9B,mBAAKa,KAAK,QAAQC,kBAAgB,qCAAlC,EACE,oBAAMxG,GAAG,+BAA+BV,UAAU,iCAAlD,EACE,YAAC,IAAD,CAAkBU,GAAG,8DAA8DC,eAAe,0BAGpG,mBAAKX,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeU,GAAG,8BAA8B6E,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,cAAeF,SAAUA,EAAUI,MAAOiB,MAIvJ,mBAAKQ,KAAK,QAAQC,kBAAgB,iCAAlC,EACE,oBAAMxG,GAAG,2BAA2BV,UAAU,iCAA9C,EACE,YAAC,IAAD,CAAkBU,GAAG,oDAAoDC,eAAe,sBAG1F,mBAAKX,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeU,GAAG,kBAAkB6E,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,cAAe,QAASF,SAAUA,EAAUI,MAAOkB,IAChJ,YAAC,IAAD,CAAehG,GAAG,kBAAkB6E,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,cAAe,YAAaF,SAAUA,EAAUI,MAAOmB,MAIxJ,mBAAKM,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,uCAAuCC,eAAe,oBAEhJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOoB,IACzKG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,UAAWF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAC/J,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUI,MAAOqB,IACvH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOsB,MAI5H,mBAAKG,KAAK,QAAQC,kBAAgB,qCAAlC,EACE,oBAAMxG,GAAG,+BAA+BV,UAAU,iCAAlD,EAA6E,YAAC,IAAD,CAAkBU,GAAG,+CAA+CC,eAAe,0BAEhK,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,kBAAmBF,SAAUA,EAAUI,MAAOoB,IACjLG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,kBAAmBF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IACvK,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,kBAAmBF,SAAUA,EAAUI,MAAOqB,IAC/H,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,kBAAmBF,SAAUA,EAAUI,MAAOsB,MAIpI,mBAAKG,KAAK,QAAQC,kBAAgB,gCAAlC,EACE,oBAAMxG,GAAG,0BAA0BV,UAAU,iCAA7C,EAAwE,YAAC,IAAD,CAAkBU,GAAG,0CAA0CC,eAAe,iBAEtJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,aAAcF,SAAUA,EAAUI,MAAOoB,IAC5KG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,aAAcF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAClK,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,aAAcF,SAAUA,EAAUI,MAAOqB,IAC1H,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,aAAcF,SAAUA,EAAUI,MAAOsB,MAI/H,mBAAKG,KAAK,QAAQC,kBAAgB,8BAAlC,EACE,oBAAMxG,GAAG,wBAAwBV,UAAU,iCAA3C,EAAsE,YAAC,IAAD,CAAkBU,GAAG,wCAAwCC,eAAe,eAElJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,WAAYF,SAAUA,EAAUI,MAAOoB,IAC1KG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,WAAYF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAChK,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,WAAYF,SAAUA,EAAUI,MAAOqB,IACxH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,WAAYF,SAAUA,EAAUI,MAAOsB,MAI7H,mBAAKG,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,uCAAuCC,eAAe,aAEhJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOoB,IACzKG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,UAAWF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAC/J,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUI,MAAOqB,IACvH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOsB,MAI5H,mBAAKG,KAAK,QAAQC,kBAAgB,2BAAlC,EACE,oBAAMxG,GAAG,qBAAqBV,UAAU,iCAAxC,EAAmE,YAAC,IAAD,CAAkBU,GAAG,qCAAqCC,eAAe,mBAE5I,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,QAASF,SAAUA,EAAUI,MAAOoB,IACvKG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,QAASF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAC7J,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,QAASF,SAAUA,EAAUI,MAAOqB,IACrH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,QAASF,SAAUA,EAAUI,MAAOsB,MAI1H,mBAAKG,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,uCAAuCC,eAAe,gBAEhJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOoB,IACzKG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,UAAWF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAC/J,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUI,MAAOqB,IACvH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOsB,MAI5H,mBAAKG,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,uCAAuCC,eAAe,YAEhJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOoB,IACzKG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,UAAWF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IAC/J,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUI,MAAOqB,IACvH,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUI,MAAOsB,MAI1H3I,KAAKO,QAAQyI,SAASC,YAAcC,MAA4BA,MAChE,mBAAKJ,KAAK,QAAQC,kBAAgB,oCAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,8CAA8CC,eAAe,mBAEvJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,iBAAkBF,SAAUA,EAAUI,MAAOoB,IAChLG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,iBAAkBF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IACtK,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,iBAAkBF,SAAUA,EAAUI,MAAOqB,IAC9H,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,iBAAkBF,SAAUA,EAAUI,MAAOsB,MAKnI3I,KAAKO,QAAQyI,SAASC,YAAcE,MAA8BA,MAClE,mBAAKL,KAAK,QAAQC,kBAAgB,mCAAlC,EACE,oBAAMxG,GAAG,uBAAuBV,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBU,GAAG,6CAA6CC,eAAe,kBAEtJ,mBAAKX,UAAU,iCAAf,EACE,YAAC,GAAD,CAAeyF,SAAgC,WAAtBc,EAAgChB,OAAO,wBAAwBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,gBAAiBF,SAAUA,EAAUI,MAAOoB,IAC/KG,GAAoB,YAAC,GAAD,CAAexB,OAAO,qBAAqBF,SAAUc,EAAcb,YAAa,CAAC,SAAU,gBAAiBF,SAAUjH,KAAK6H,aAAcR,MAAOwB,IACrK,YAAC,GAAD,CAAezB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,QAAS,gBAAiBF,SAAUA,EAAUI,MAAOqB,IAC7H,YAAC,GAAD,CAAetB,OAAO,gBAAgBF,SAAUA,EAAUC,YAAa,CAAC,SAAU,gBAAiBF,SAAUA,EAAUI,MAAOsB,QAxLvHf,GAEZwB,aAAe,CACpBJ,SAAUnG,IAAUoB,Q,yCCHxB,MAAMd,GAAWC,YAAe,CAC9BiG,aAAa,CAAD,2HACZC,aAAa,CAAD,+DACZC,iBAAiB,CAAD,oJA4DH/F,I,GAAAA,eAAWU,mBAzDFqB,IAAK,CAC3B2B,SAAU3B,EAAM5E,MAAM,CAAC,WAAY,kBACnCqH,aAAczC,EAAMrF,IAAI,sBACxBgI,cAAe3C,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,WAAW6I,UAAS,GAC7ErB,eAAgB5C,EAAM5E,MAAM,CAAC,gBAAiB,mBAC9CyH,kBAAmB7C,EAAM5E,MAAM,CAAC,gBAAiB,0BAGxB,CAACwD,EAAD,SAAW,KAAEV,GAAb,QAAyB,CAElDwD,SAAUa,EAAMC,GACE,SAAZD,EAAK,GACHC,QAA0C,IAAxB0B,OAAO/D,cAA4D,YAA5BA,aAAagE,WACxEvF,EAASwF,aAA0BD,IAE/BvF,EADiB,YAAfuF,EACOE,aAAwB9B,EAAK+B,MAAM,GAAI9B,GAEvC+B,kBAAUC,EAAW5G,GAASoG,uBAI3CpF,EAASyF,aAAwB9B,EAAK+B,MAAM,GAAI9B,IAE7B,gBAAZD,EAAK,IACd3D,EAAS6F,aAAc,CAAC,mBAAoBlC,GAAOC,IACnD5D,EAAS8F,YAAU,SACE,WAAZnC,EAAK,IAAmBC,QAA0C,IAAxB0B,OAAO/D,cAA4D,YAA5BA,aAAagE,YACnG3B,QAA0C,IAAxB0B,OAAO/D,cAA4D,YAA5BA,aAAagE,WACxEvF,EAASwF,aAA0BD,IAE/BvF,EADiB,YAAfuF,EACOM,aAAc,CAAC,mBAAoBlC,GAAOC,GAE1C+B,kBAAUC,EAAW5G,GAASoG,uBAO7CpF,EAAS6F,aAAc,CAAC,mBAAoBlC,GAAOC,KAIvDE,UACE9D,EAAS+F,aAAU,UAAW,CAC5BC,QAAS1G,EAAKI,cAAcV,GAASkG,cACrCe,QAAS3G,EAAKI,cAAcV,GAASmG,cACrCe,UAAW,IAAMlG,EAASmG,mBAI9BjC,kCACElE,EAASwF,mBAKazF,CAA6C0D,KCpEvE,MAAM2C,GAAWnH,YAAe,CAC9BoH,SAAS,CAAD,8DACRC,WAAW,CAAD,kEACVC,OAAO,CAAD,0DACNC,MAAM,CAAD,+DACLC,QAAQ,CAAD,4DACPC,SAAS,CAAD,sF,IAIJC,GADUtH,Y,GAAD,cACSoD,IAAMG,cAS5BhD,QAASgH,GACP,MAAO,IAAM/K,KAAKC,MAAM+K,aAAaD,GAGvCxJ,SACE,MAAM,eAAE0J,EAAF,aAAkBC,EAAlB,KAAgCzH,GAASzD,KAAKC,MA6EpD,OA5EyBiL,EAsBvB,mBAAKrJ,UAAU,iCAAf,EACE,sBACEA,UAA8B,QAAnBoJ,EAA2B,SAAW,GACjDlH,QAAS/D,KAAK+D,QAAQ,aAFxB,EAIE,YAAC,IAAD,CACExB,GAAG,2BACHC,eAAe,SAGnB,sBACEX,UAA8B,YAAnBoJ,EAA+B,SAAW,GACrDlH,QAAS/D,KAAK+D,QAAQ,WACtBhC,MAAO0B,EAAKI,cAAc0G,GAASC,gBAHrC,EAKE,YAAC,IAAD,CAAMjI,GAAG,YAAYD,YAAU,KAEjC,sBACET,UAA8B,cAAnBoJ,EAAiC,SAAW,GACvDlH,QAAS/D,KAAK+D,QAAQ,aACtBhC,MAAO0B,EAAKI,cAAc0G,GAASE,kBAHrC,EAKE,YAAC,IAAD,CAAMlI,GAAG,OAAOD,YAAU,KAE5B,sBACET,UAA8B,WAAnBoJ,EAA8B,SAAW,GACpDlH,QAAS/D,KAAK+D,QAAQ,UACtBhC,MAAO0B,EAAKI,cAAc0G,GAASG,cAHrC,EAKE,YAAC,IAAD,CAAMnI,GAAG,UAAUD,YAAU,KAE/B,sBACET,UAA8B,SAAnBoJ,EAA4B,SAAW,GAClDlH,QAAS/D,KAAK+D,QAAQ,QACtBhC,MAAO0B,EAAKI,cAAc0G,GAASI,aAHrC,EAKE,YAAC,IAAD,CAAMpI,GAAG,QAAQD,YAAU,KAE7B,sBACET,UAA8B,WAAnBoJ,EAA8B,SAAW,GACpDlH,QAAS/D,KAAK+D,QAAQ,UACtBhC,MAAO0B,EAAKI,cAAc0G,GAASM,gBAHrC,EAKE,YAAC,IAAD,CAAMtI,GAAG,OAAOD,YAAU,KAE5B,sBACET,UAA8B,WAAnBoJ,EAA8B,SAAW,GACpDlH,QAAS/D,KAAK+D,QAAQ,UACtBhC,MAAO0B,EAAKI,cAAc0G,GAASK,eAHrC,EAKE,YAAC,IAAD,CAAMrI,GAAG,YAAYD,YAAU,MAvEnC,mBAAKT,UAAU,iCAAf,EACE,sBACEA,UAA8B,QAAnBoJ,EAA2B,SAAW,GACjDlH,QAAS/D,KAAK+D,QAAQ,aAFxB,EAIE,YAAC,IAAD,CACExB,GAAG,2BACHC,eAAe,SAGnB,sBACEX,UAA8B,YAAnBoJ,EAA+B,SAAW,GACrDlH,QAAS/D,KAAK+D,QAAQ,iBAFxB,EAIE,YAAC,IAAD,CACExB,GAAG,gCACHC,eAAe,mB,GChCZ0B,I,GAAAA,sBAXaqB,IAAK,CAC/B0F,eAAgB1F,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,cAAe,WACzEuK,aAAc3F,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,cAAe,iBAG7CwD,IAAD,CACzB6G,aAAcG,GACZhH,EAAS8F,YAAUkB,QAIRjH,CAAiD4G,I,yDCLhE,MAAM3H,GAAWC,YAAe,CAC9BgI,MAAM,CAAD,8C,IAKDC,GAFUnH,mB,IACfV,Y,GADc,cAE6BoD,IAAMG,cAAe,cAAD,yBAO9DuE,YAAc,KACZtL,KAAKC,MAAMkE,SAASwF,gBARwC,KAW9D4B,YAAc,KACZvL,KAAKC,MAAMkE,SAAS6F,aAAc,CAAC,gBAAiB,4BAA4B,KAGlFzI,SACE,MAAM,KAAEkC,GAASzD,KAAKC,MAEtB,OACE,mBAAK4B,UAAU,wCAAf,EACE,mBAAKA,UAAU,+CAAf,EACE,YAAC,IAAD,CAAYiC,KAAK,QAAQC,QAAS/D,KAAKuL,YAAaxJ,MAAO0B,EAAKI,cAAcV,GAASiI,UAGzF,2BAAI,YAAC,IAAD,CAAkB7I,GAAG,wCAAwCC,eAAe,wBAChF,0BAAG,YAAC,IAAD,CAAkBD,GAAG,iDAAiDC,eAAe,8NAA8NC,OAAQ,CAAEqB,KAAM,YAAC,IAAD,CAAMvB,GAAG,gBAC/U,YAAC,KAAD,CAAQwB,QAAS/D,KAAKsL,kBAAtB,EAAmC,YAAC,IAAD,CAAkB/I,GAAG,yCAAyCC,eAAe,uC,kBC5BxH,MAAMW,GAAWC,YAAe,CAC9BoI,OAAM,+DACNC,QAAO,iEACPC,UAAS,wEACTC,SAAQ,uE,IAIJC,GADUpI,c,GAAD,cACwB5D,IAWrC2B,SACE,MAAM,KAAEkC,EAAF,iBAAQoI,GAAqB7L,KAAKC,MAGxC,OACE,mBAAK4B,UAAU,8CAAf,EACE,sBAAQkC,QAAS/D,KAAKC,MAAM6L,UAAWjK,UAAWgK,EAAmB,SAAW,SAAhF,EACE,+BAAQ,qBAAOpI,EAAKI,cAAcV,GAASqI,SAG7C,sBAAQzH,QAAS/D,KAAKC,MAAM8L,WAAYlK,UAAYgK,EAA8B,GAAX,eAAvE,EACE,+BAAQ,qBAAOpI,EAAKI,cAAcV,GAASsI,UAG7C,sBAAQ1H,QAAS/D,KAAKC,MAAM+L,eAA5B,EACE,+BAAQ,qBAAOvI,EAAKI,cAAcV,GAASuI,YAG7C,sBAAQ3H,QAAS/D,KAAKC,MAAMgM,qBAA5B,EACE,YAAC,IAAD,CAAM1J,GAAG,UAAU,qBAAOkB,EAAKI,cAAcV,GAASwI,eA5BvD/I,UAAY,CACjBqJ,eAAiBpJ,IAAUmB,KAAKhB,WAChC8I,UAAYjJ,IAAUmB,KAAKhB,WAC3B+I,WAAalJ,IAAUmB,KAAKhB,WAC5BgJ,SAAWnJ,IAAUmB,KAAKhB,WAC1BS,KAAMZ,IAAUoB,OAAOjB,WACvB6I,iBAAkBhJ,IAAUC,M,YCjBhC,MAAMK,GAAWC,YAAe,CAC9BiG,aAAa,CAAD,sIACZC,aAAa,CAAD,iFAiCC9F,I,MAAAA,eAAWU,mBAJFqB,IAAK,CAC3BsG,iBAAkBtG,EAAM5E,MAAM,CAAC,gBAAiB,yBA3BvB,CAACwD,EAAD,SAAW,KAAEV,GAAb,QAAyB,CAClDyI,oBAAoBC,GAClBhI,EAASiI,YAA8BD,KAGzCF,iBACE9H,EAAS+F,aAAU,UAAW,CAC5BC,QAAS1G,EAAKI,cAAcV,GAASkG,cACrCe,QAAS3G,EAAKI,cAAcV,GAASmG,cACrCe,UAAW,IAAMlG,EAASkI,mBAI9BP,YACE3H,EAASmI,aAAqB,KAGhCP,aACE5H,EAASmI,aAAqB,KAGhCN,WACE7H,EAASmI,YAAqB,WAQRpI,CAA6C0H,KCfvE,MAAMzI,GAAWC,YAAe,CAC9BrB,MAAM,CAAD,0DACLwK,mBAAkB,kFAClBC,WAAU,qFAGNC,GAAmBC,aAAe,CACtCnH,GAASA,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,YACjDgM,GACKC,gBAAcD,EAAMpF,QAAOsF,IAASA,IAAMC,UAG7CC,GAAmBL,aAAe,CACtCnH,GAASA,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,cAAe,SAClE4E,GAASA,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,cAAe,WAClE8L,GACAlH,GAASA,EAAM5E,MAAM,CAAC,gBAAiB,YACtC,CAACqM,EAAeC,EAAaC,EAAeC,IACxCH,GAAiC,QAAhBC,EAMfE,EAAc5F,QAAOsF,GAAiB,OAATA,GAAiBI,IAAgBJ,EAAK3M,IAAI,UAFrEiN,EAAcC,WAAUP,GAAiB,OAATA,GAAiBK,EAAc1D,SAASqD,EAAK3M,IAAI,a,IAuCtFmN,GAFUnJ,mBAhCQqB,IAAK,CAC3ByH,cAAezH,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,cAAe,SACxEwM,cAAeJ,GAAiBxH,GAChC+H,cAAgB/H,EAAMrF,IAAI,kBAC1BqN,UAAWhI,EAAM5E,MAAM,CAAC,gBAAiB,cAAc,GACvD6M,SAAUjI,EAAM5E,MAAM,CAAC,gBAAiB,WAAa,GAAK4E,EAAM5E,MAAM,CAAC,gBAAiB,iBAAiBiD,KAAO,EAChH6J,QAASlI,EAAM5E,MAAM,CAAC,gBAAiB,YACvC+M,WAAYnI,EAAM5E,MAAM,CAAC,gBAAiB,gBAAiBiM,mBAAiBhJ,KAC5E+J,oBAAqBpI,EAAM5E,MAAM,CAAC,gBAAiB,iBACnDiN,WAAYrI,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,eAAiB4E,EAAM5E,MAAM,CAAC,gBAAiB,iBAAmB,IACxHkN,cAAetI,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,gBAAqE,MAAnD4E,EAAM5E,MAAM,CAAC,gBAAiB,kBAA4BoM,GAAiBxH,GAAOuI,MAAKjB,GAAiB,OAATA,GAAiBkB,aAAUlB,EAAK3M,IAAI,MAAOqF,EAAM5E,MAAM,CAAC,gBAAiB,kBAAoB,IACvQqN,4BAA6BzI,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,WAAW6I,UAAS,IAASjE,EAAM5E,MAAM,CAAC,gBAAiB,oBAA8E,YAAxD4E,EAAM5E,MAAM,CAAC,gBAAiB,wBAAwC4E,EAAM5E,MAAM,CAAC,WAAY,gBAAiB,gCAI/OwD,IAAQ,CACjC+H,oBAAoBC,GAClBhI,EAASiI,YAA8BD,KAEzC8B,eACE9J,EAAS+J,eACT/J,EAASgK,YAAc,CAAEC,WAAW,MAEtCC,UACElK,EAASmK,gBAEXrI,YACE9B,EAASoK,gBAEXpK,c,IAIDX,c,GADc,cAEaoD,IAAMG,cAAe,cAAD,yBA2B9CxB,MAAQ,CACNiJ,cAAc,GA5B8B,KA+B9CC,cAAiBC,IACf1O,KAAKC,MAAMkE,SAASwK,YAAoB,CAAED,YAhCE,KAmC9CE,gBAAkB,KAAS,KACzB,MAAMC,EAAO7O,KAAKC,MAAMkN,cAAc0B,OACtC7O,KAAKC,MAAMkE,SAASwK,YAAoB,CAAED,MAAOG,GAAQA,EAAK3O,IAAI,WACjE,IAAK,CAAE4O,SAAS,IAtC2B,KAwC9CC,kBAAoB,KAClB/O,KAAKC,MAAMkE,SAAS6K,gBAzCwB,KA4C9CC,kBAAoB,KAAS,KAC3BjP,KAAKC,MAAMkE,SAAS+K,aAAuB,MAC1C,KA9C2C,KAgD9CC,aAAe,KAAS,KACtBnP,KAAKC,MAAMkE,SAAS+K,aAAuB,MAC1C,KAlD2C,KAoD9CE,UAAY,KACV,MAAM,SAAEC,EAAF,SAAYlL,GAAanE,KAAKC,MAGlCkE,EADEkL,EACOC,YAAaD,GAEbE,YAAU,gBAAiB,MA1DM,KA8D9CC,WAAcC,IACZ,MAAM,SAAEJ,EAAF,SAAYlL,GAAanE,KAAKC,MACpCkE,EAASuL,YAAWL,EAAUI,KAhEc,KAmE9CE,kBAAoB,KAClB3P,KAAK4P,OAAOC,aApEgC,KAuE9CC,aAAeC,IACb/P,KAAK4P,OAASG,GAxE8B,KA2E9ClQ,aAAe0C,IACb,MAAMyN,EAAehQ,KAAKC,MAAMkN,cAAc8C,WAAUpD,GAAiB,OAATA,GAAiBA,EAAK3M,IAAI,QAAUqC,IAAM,EAC1GvC,KAAKkQ,aAAaF,GAAc,IA7EY,KAgF9C7P,eAAiBoC,IACf,MAAMyN,EAAehQ,KAAKC,MAAMkN,cAAc8C,WAAUpD,GAAiB,OAATA,GAAiBA,EAAK3M,IAAI,QAAUqC,IAAM,EAC1GvC,KAAKkQ,aAAaF,GAAc,IAlFY,KAiH9CG,uBAAyB,KACvBnQ,KAAKoQ,SAAS,CAAE5B,cAAc,KAlHc,KAqH9CtC,oBAAsB,KACpBlM,KAAKoQ,SAAS,CAAE5B,cAAc,IAC9BxO,KAAKC,MAAMiM,qBAAqBlM,KAAKC,MAAM0N,sBAvHC,KA0H9C0C,iBAAmB,KACjBrQ,KAAKC,MAAMgO,gBAtCbiC,aAAcI,EAAOC,GACnB,MAAMC,EAAYxQ,KAAK4P,OAAOa,KACxBC,EAAUF,EAAUG,cAAV,wBAA+CL,EAAQ,GAAvD,gBAEZI,IACEH,GAAaC,EAAUX,UAAYa,EAAQE,UAC7CF,EAAQG,gBAAe,IACbN,GAAaC,EAAUX,UAAYW,EAAUM,aAAeJ,EAAQE,UAAYF,EAAQK,cAClGL,EAAQG,gBAAe,GAEzBH,EAAQM,SAIZC,oBACE,MAAM,QAAE5C,GAAYrO,KAAKC,MACrBoO,GACFA,IAIJ6C,uBACE,MAAM,UAAEjL,GAAcjG,KAAKC,MACvBgG,GACFA,IAiBJ1E,SACE,MAAM,KAAEkC,EAAF,cAAQ0J,EAAR,UAAuBI,EAAvB,SAAkCC,EAAlC,SAA4C6B,EAA5C,YAAsD8B,EAAtD,QAAmE1D,EAAnE,WAA4EC,EAA5E,cAAwFV,EAAxF,WAAuGY,EAAvG,cAAmHC,EAAnH,4BAAkIG,GAAgChO,KAAKC,OACvK,cAAEwG,EAAF,oBAAiBkH,GAAwB3N,KAAKC,OAC9C,aAAEuO,GAAiBxO,KAAKuF,MACxB6L,IAAW/B,EACXgC,EAAe,YAAC,IAAD,CAAkB9O,GAAG,6BAA6BC,eAAe,qGAEtF,IAAI8O,EAAoB,KAExB,MAAMC,EAAqBvE,EACtB,YAAC,GAAD,IACD,KAGFsE,EADE/D,GAAavN,KAAKsR,kBACAtR,KAAKsR,kBAChBnE,EAAcvJ,KAAO,GAAK6J,EACfN,EAAcjK,KAAI,CAAC2J,EAAMyD,IAAmB,OAATzD,EACrD,YAAC,KAAD,CAEEvF,SAAUiG,EACVmB,MAAO4B,EAAQ,EAAInD,EAAcxM,MAAM,CAAC2P,EAAQ,EAAG,OAAS,KAC5DvM,QAAS/D,KAAKyO,eAHT,OAAStB,EAAcxM,MAAM,CAAC2P,EAAQ,EAAG,QAMhD,YAAC,EAAD,CAEExQ,aAAc+M,EACdrG,UAAWqG,EAAK3M,IAAI,WACpBH,SAAUC,KAAKH,aACfO,WAAYJ,KAAKG,eACjBuB,OAAuB,MAAfkM,GAAsBG,aAAUlB,EAAK3M,IAAI,MAAO0N,GAAc,GALjEf,EAAK3M,IAAI,SASE,KAGtBF,KAAKsR,kBAAoBA,EAEzB,MAAME,EACJ,YAAC,KAAD,CACEC,UAAS,iBAAmBpC,EAC5BqC,aAAcN,EACd7D,UAAWA,EACXoE,YAAapE,GAAoC,IAAvBJ,EAAcvJ,KACxC6J,QAASA,EACTC,WAAYA,EACZvH,QAAS6H,GAA+B,YAAC,GAAD,IACxC4D,eAAa,EACbP,aAAcA,EACdQ,WAAY7R,KAAK4O,gBACjBkD,cAAe9R,KAAK+O,kBACpBgD,cAAe/R,KAAKiP,kBACpB+C,SAAUhS,KAAKmP,aACf8C,gBAAiBd,QAdnB,EAgBGG,GAICY,EAAe,GAEjBrE,GACFqE,EAAaxR,KACX,sBACEyR,aAAY1O,EAAKI,cAAcV,GAASqJ,YACxCzK,MAAO0B,EAAKI,cAAcV,GAASqJ,YACnCzI,QAAS/D,KAAKqQ,iBACdxO,UAAU,8BAJZ,EAME,YAAC,IAAD,CAAMU,GAAG,YAKf,MAAM6P,EAA+BhQ,IAAW,wBAAyB,CACvE,OAAUuL,IAGN0E,EAA+BjQ,IAAW,iCAAkC,CAChF,WAAcuL,EACd,UAAaa,IAGT8D,EAAwB7O,EAAKI,cAAcV,GAASoJ,oBAE1D2F,EAAaxR,KACX,sBACEyR,aAAYG,EACZvQ,MAAOuQ,EACPvO,QAAS/D,KAAKkM,oBACdrK,UAAWuQ,QAJb,EAME,YAAC,IAAD,CAAM7P,GAAG,aAIb,MAAMgQ,EACJ,mBAAK1Q,UAAWwQ,EAA8BG,gBAAiBxS,KAAKmQ,6BAApE,EACE,mBAAKtO,UAAU,sDAAf,EACI8L,GAAuBa,EAAiB,YAAC,GAAD,IAAyC,OAKzF,OACE,kBAAC,IAAD,CACEyD,gBAAiBd,EACjBsB,IAAKzS,KAAK8P,aACVpN,KAAK,gBACLgQ,aAAc1S,KAAKC,MAAM0N,oBAAsB,iBAAmB,KAClEtG,MAAO5D,EAAKI,cAAcV,GAASpB,QAEnC,YAAC,IAAD,CACE+B,KAAK,OACL4D,OAAQ8F,EACRzL,MAAO0B,EAAKI,cAAcV,GAASpB,OACnC4Q,MAAO3S,KAAKoP,UACZwD,OAAQ5S,KAAKwP,WACbzL,QAAS/D,KAAK2P,kBACdyB,OAAQA,EACRD,YAAaA,EACb7D,cAAetN,KAAKC,MAAMqN,cAC1BuF,YAAaX,EACbY,cAAeP,QAXjB,EAaE,YAAC,GAAD,KAEDhB,EACAC,MAxOAuB,aAAe,CACpBrB,aAAa,G","file":"js/flavours/glitch/async/notifications-390e3168f8ef7fe02c10.chunk.js","sourcesContent":["//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow'\n              defaultMessage='{name} followed you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport { HotKeys } from 'react-hotkeys';\nimport Icon from 'flavours/glitch/components/icon';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject, notification, unread } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow_request'\n              defaultMessage='{name} has requested to follow you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <div className='account'>\n            <div className='account__wrapper'>\n              <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n                <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n                <DisplayName account={account} />\n              </Permalink>\n\n              <div className='account__relationship'>\n                <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n                <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n              </div>\n            </div>\n          </div>\n\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'flavours/glitch/actions/accounts';\n\nconst mapDispatchToProps = (dispatch, { account }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(account.get('id')));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(account.get('id')));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(FollowRequest);\n","//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.admin.sign_up'\n              defaultMessage='{name} signed up'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport AvatarOverlay from 'flavours/glitch/components/avatar_overlay';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\n\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nexport default @injectIntl\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {report.get('id')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {{count} post} other {{count} posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\nimport Report from './report';\n\nconst messages = defineMessages({\n  adminReport: { id: 'notification.admin.report', defaultMessage: '{name} reported {target}' },\n});\n\nexport default class AdminReport extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n    report: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { intl, account, notification, unread, report } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Permalink className='notification__display-name' href={targetAccount.get('url')} title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetReport } from 'flavours/glitch/selectors';\nimport AdminReport from '../components/admin_report';\n\nconst mapStateToProps = (state, { notification }) => {\n  const getReport = makeGetReport();\n\n  return {\n    report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n  };\n};\n\nexport default connect(mapStateToProps)(AdminReport);\n","//  Package imports.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\n//  Our imports,\nimport StatusContainer from 'flavours/glitch/containers/status_container';\nimport NotificationFollow from './follow';\nimport NotificationFollowRequestContainer from '../containers/follow_request_container';\nimport NotificationAdminSignup from './admin_signup';\nimport NotificationAdminReportContainer from '../containers/admin_report_container';\n\nexport default class Notification extends ImmutablePureComponent {\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    onUnmount: PropTypes.func,\n    unread: PropTypes.bool,\n  };\n\n  render () {\n    const {\n      hidden,\n      notification,\n      onMoveDown,\n      onMoveUp,\n      onMention,\n      getScrollPosition,\n      updateScrollBottom,\n    } = this.props;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return (\n        <NotificationFollow\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'follow_request':\n      return (\n        <NotificationFollowRequestContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.sign_up':\n      return (\n        <NotificationAdminSignup\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.report':\n      return (\n        <NotificationAdminReportContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'mention':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'status':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='status'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'favourite':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='favourite'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'reblog':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='reblog'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'poll':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='poll'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'update':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='update'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    default:\n      return null;\n    }\n  }\n\n}\n","//  Package imports.\nimport { connect } from 'react-redux';\n\n//  Our imports.\nimport { makeGetNotification } from 'flavours/glitch/selectors';\nimport Notification from '../components/notification';\nimport { mentionCompose } from 'flavours/glitch/actions/compose';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n\n  const mapStateToProps = (state, props) => ({\n    notification: getNotification(state, props.notification, props.accountId),\n    notifCleaning: state.getIn(['notifications', 'cleaningMode']),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class ClearColumnButton extends React.Component {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex='0' onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport classNames from 'classnames'\n\nexport default class PillBarButton extends React.PureComponent {\n\n  static propTypes = {\n    prefix: PropTypes.string,\n    settings: ImmutablePropTypes.map.isRequired,\n    settingPath: PropTypes.array.isRequired,\n    label: PropTypes.node.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  }\n\n  onChange = () => {\n    const { settings, settingPath } = this.props;\n    this.props.onChange(settingPath, !settings.getIn(settingPath));\n  }\n\n  render () {\n    const { prefix, settings, settingPath, label, disabled } = this.props;\n    const id = ['setting-pillbar-button', prefix, ...settingPath].filter(Boolean).join('-');\n    const active = settings.getIn(settingPath);\n\n    return (\n      <button\n        key={id}\n        id={id}\n        className={classNames('pillbar-button', { active })}\n        disabled={disabled}\n        onClick={this.onChange}\n        aria-pressed={active}\n      >\n        {label}\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\nimport PillBarButton from './pill_bar_button';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'flavours/glitch/permissions';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.bool,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  }\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {(this.context.identity.permissions & PERMISSION_MANAGE_USERS === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {(this.context.identity.permissions & PERMISSION_MANAGE_REPORTS === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { setFilter } from 'flavours/glitch/actions/notifications';\nimport { clearNotifications, requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeAlerts as changePushNotifications } from 'flavours/glitch/actions/push_notifications';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { showAlert } from 'flavours/glitch/actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'flavours/glitch/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport Icon from 'flavours/glitch/components/icon';\nimport Button from 'flavours/glitch/components/button';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @connect()\n@injectIntl\nclass NotificationsPermissionBanner extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  }\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n","/**\n * Buttons widget for controlling the notification clearing mode.\n * In idle state, the cleaning mode button is shown. When the mode is active,\n * a Confirm and Abort buttons are shown in its place.\n */\n\n\n//  Package imports  //\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Icon from 'flavours/glitch/components/icon';\n\nconst messages = defineMessages({\n  btnAll : { id: 'notification_purge.btn_all', defaultMessage: 'Select\\nall' },\n  btnNone : { id: 'notification_purge.btn_none', defaultMessage: 'Select\\nnone' },\n  btnInvert : { id: 'notification_purge.btn_invert', defaultMessage: 'Invert\\nselection' },\n  btnApply : { id: 'notification_purge.btn_apply', defaultMessage: 'Clear\\nselected' },\n});\n\nexport default @injectIntl\nclass NotificationPurgeButtons extends ImmutablePureComponent {\n\n  static propTypes = {\n    onDeleteMarked : PropTypes.func.isRequired,\n    onMarkAll : PropTypes.func.isRequired,\n    onMarkNone : PropTypes.func.isRequired,\n    onInvert : PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    markNewForDelete: PropTypes.bool,\n  };\n\n  render () {\n    const { intl, markNewForDelete } = this.props;\n\n    //className='active'\n    return (\n      <div className='column-header__notif-cleaning-buttons'>\n        <button onClick={this.props.onMarkAll} className={markNewForDelete ? 'active' : ''}>\n          <b>∀</b><br />{intl.formatMessage(messages.btnAll)}\n        </button>\n\n        <button onClick={this.props.onMarkNone} className={!markNewForDelete ? 'active' : ''}>\n          <b>∅</b><br />{intl.formatMessage(messages.btnNone)}\n        </button>\n\n        <button onClick={this.props.onInvert}>\n          <b>¬</b><br />{intl.formatMessage(messages.btnInvert)}\n        </button>\n\n        <button onClick={this.props.onDeleteMarked}>\n          <Icon id='trash' /><br />{intl.formatMessage(messages.btnApply)}\n        </button>\n      </div>\n    );\n  }\n\n}\n","//  Package imports.\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\n//  Our imports.\nimport NotificationPurgeButtons from 'flavours/glitch/components/notification_purge_buttons';\nimport {\n  deleteMarkedNotifications,\n  enterNotificationClearingMode,\n  markAllNotifications,\n} from 'flavours/glitch/actions/notifications';\nimport { openModal } from 'flavours/glitch/actions/modal';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.marked_clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all selected notifications?' },\n  clearConfirm: { id: 'notifications.marked_clear', defaultMessage: 'Clear selected notifications' },\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n\n  onDeleteMarked() {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(deleteMarkedNotifications()),\n    }));\n  },\n\n  onMarkAll() {\n    dispatch(markAllNotifications(true));\n  },\n\n  onMarkNone() {\n    dispatch(markAllNotifications(false));\n  },\n\n  onInvert() {\n    dispatch(markAllNotifications(null));\n  },\n});\n\nconst mapStateToProps = state => ({\n  markNewForDelete: state.getIn(['notifications', 'markNewForDelete']),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(NotificationPurgeButtons));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport {\n  enterNotificationClearingMode,\n  expandNotifications,\n  scrollTopNotifications,\n  mountNotifications,\n  unmountNotifications,\n  loadPending,\n  markNotificationsAsRead,\n} from 'flavours/glitch/actions/notifications';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { submitMarkers } from 'flavours/glitch/actions/markers';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport LoadGap from 'flavours/glitch/components/load_gap';\nimport Icon from 'flavours/glitch/components/icon';\nimport compareId from 'flavours/glitch/util/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\n\nimport NotificationPurgeButtonsContainer from 'flavours/glitch/containers/notification_purge_buttons_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  enterNotifCleaning : { id: 'notification_purge.start', defaultMessage: 'Enter notification cleaning mode' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  localSettings:  state.get('local_settings'),\n  isLoading: state.getIn(['notifications', 'isLoading'], true),\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  notifCleaningActive: state.getIn(['notifications', 'cleaningMode']),\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\n/* glitch */\nconst mapDispatchToProps = dispatch => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n  onMarkAsRead() {\n    dispatch(markNotificationsAsRead());\n    dispatch(submitMarkers({ immediate: true }));\n  },\n  onMount() {\n    dispatch(mountNotifications());\n  },\n  onUnmount() {\n    dispatch(unmountNotifications());\n  },\n  dispatch,\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    localSettings: ImmutablePropTypes.map,\n    notifCleaningActive: PropTypes.bool,\n    onEnterCleaningMode: PropTypes.func,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  state = {\n    animatingNCD: false,\n  };\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  componentDidMount () {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  componentWillUnmount () {\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount();\n    }\n  }\n\n  handleTransitionEndNCD = () => {\n    this.setState({ animatingNCD: false });\n  }\n\n  onEnterCleaningMode = () => {\n    this.setState({ animatingNCD: true });\n    this.props.onEnterCleaningMode(!this.props.notifCleaningActive);\n  }\n\n  handleMarkAsRead = () => {\n    this.props.onMarkAsRead();\n  }\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const { notifCleaning, notifCleaningActive } = this.props;\n    const { animatingNCD } = this.state;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = showFilterBar\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    const scrollContainer = (\n      <ScrollableList\n        scrollKey={`notifications-${columnId}`}\n        trackScroll={!pinned}\n        isLoading={isLoading}\n        showLoading={isLoading && notifications.size === 0}\n        hasMore={hasMore}\n        numPending={numPending}\n        prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n        alwaysPrepend\n        emptyMessage={emptyMessage}\n        onLoadMore={this.handleLoadOlder}\n        onLoadPending={this.handleLoadPending}\n        onScrollToTop={this.handleScrollToTop}\n        onScroll={this.handleScroll}\n        bindToDocument={!multiColumn}\n      >\n        {scrollableContent}\n      </ScrollableList>\n    );\n\n    const extraButtons = [];\n\n    if (canMarkAsRead) {\n      extraButtons.push(\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    const notifCleaningButtonClassName = classNames('column-header__button', {\n      'active': notifCleaningActive,\n    });\n\n    const notifCleaningDrawerClassName = classNames('ncd column-header__collapsible', {\n      'collapsed': !notifCleaningActive,\n      'animating': animatingNCD,\n    });\n\n    const msgEnterNotifCleaning = intl.formatMessage(messages.enterNotifCleaning);\n\n    extraButtons.push(\n      <button\n        aria-label={msgEnterNotifCleaning}\n        title={msgEnterNotifCleaning}\n        onClick={this.onEnterCleaningMode}\n        className={notifCleaningButtonClassName}\n      >\n        <Icon id='eraser' />\n      </button>\n    );\n\n    const notifCleaningDrawer = (\n      <div className={notifCleaningDrawerClassName} onTransitionEnd={this.handleTransitionEndNCD}>\n        <div className='column-header__collapsible-inner nopad-drawer'>\n          {(notifCleaningActive || animatingNCD) ? (<NotificationPurgeButtonsContainer />) : null }\n        </div>\n      </div>\n    );\n\n    return (\n      <Column\n        bindToDocument={!multiColumn}\n        ref={this.setColumnRef}\n        name='notifications'\n        extraClasses={this.props.notifCleaningActive ? 'notif-cleaning' : null}\n        label={intl.formatMessage(messages.title)}\n      >\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          localSettings={this.props.localSettings}\n          extraButton={extraButtons}\n          appendContent={notifCleaningDrawer}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n        {filterBarContainer}\n        {scrollContainer}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}