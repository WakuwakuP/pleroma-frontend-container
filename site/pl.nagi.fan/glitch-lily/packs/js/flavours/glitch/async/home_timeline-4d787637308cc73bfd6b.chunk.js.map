{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/home_timeline/components/column_settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/home_timeline/containers/column_settings_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/getting_started/components/announcements.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/getting_started/containers/announcements_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/home_timeline/index.js","webpack:///./app/javascript/images/elephant_ui_plane.svg"],"names":["messages","defineMessages","filter_regex","settings","ColumnSettings","injectIntl","React","PureComponent","render","onChange","intl","this","props","className","id","defaultMessage","prefix","settingPath","label","formatMessage","connect","state","getIn","dispatch","path","checked","changeSetting","onSave","saveSettings","close","previous","next","Content","ImmutablePureComponent","setRef","c","node","onMentionClick","mention","e","context","router","button","ctrlKey","metaKey","preventDefault","history","push","get","onHashtagClick","hashtag","replace","onStatusClick","status","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","componentDidMount","_updateLinks","componentDidUpdate","links","link","classList","contains","add","announcement","find","item","href","addEventListener","bind","setAttribute","textContent","previousSibling","text","ref","dangerouslySetInnerHTML","__html","onMouseEnter","onMouseLeave","contextTypes","PropTypes","object","propTypes","ImmutablePropTypes","map","isRequired","Emoji","emojiMap","hovered","unicodeMapping","filename","shortCode","title","draggable","alt","assetHost","Reaction","handleClick","reaction","announcementId","addReaction","removeReaction","setState","classNames","active","onClick","style","value","string","func","ReactionsBar","handleEmojiPick","data","native","willEnter","scale","reduceMotion","willLeave","spring","stiffness","damping","reactions","visibleReactions","filter","x","styles","key","toArray","items","isEmpty","transform","position","size","onPickEmoji","list","Announcement","unread","selected","startsAt","Date","endsAt","now","hasTimeRange","skipYear","getFullYear","skipEndDate","getDate","getMonth","skipTime","hour12","year","undefined","month","day","hour","minute","bool","Announcements","index","handleChangeIndex","announcements","handleNextClick","handlePrevClick","_markAnnouncementAsRead","dismissAnnouncement","mascot","elephantUIPlane","animateHeight","adjustHeight","onChangeIndex","idx","disabled","disableSwiping","icon","customEmojiMap","createSelector","reduce","set","ImmutableMap","name","show_announcements","hide_announcements","HomeTimeline","hasUnread","isPartial","hasAnnouncements","unreadAnnouncements","count","showAnnouncements","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","handleLoadMore","maxId","expandHomeTimeline","handleToggleAnnouncementsClick","stopPropagation","toggleShowAnnouncements","setTimeout","fetchAnnouncements","_checkIfReloadNeeded","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","multiColumn","pinned","announcementsButton","aria-label","aria-pressed","bindToDocument","onPin","onMove","extraButton","appendContent","trackScroll","scrollKey","onLoadMore","timelineId","emptyMessage","values","suggestions","Link","to"],"mappings":"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","file":"js/flavours/glitch/async/home_timeline-4d787637308cc73bfd6b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\nimport SettingText from 'flavours/glitch/components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show boosts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'direct']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_direct' defaultMessage='Show DMs' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText prefix='home_timeline' settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting, saveSettings } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'home']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['home', ...path], checked));\n  },\n\n  onSave () {\n    dispatch(saveSettings());\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport Icon from 'flavours/glitch/components/icon';\nimport { defineMessages, injectIntl, FormattedMessage, FormattedDate } from 'react-intl';\nimport { autoPlayGif, reduceMotion, disableSwiping } from 'flavours/glitch/util/initial_state';\nimport elephantUIPlane from 'mastodon/../images/elephant_ui_plane.svg';\nimport { mascot } from 'flavours/glitch/util/initial_state';\nimport unicodeMapping from 'flavours/glitch/util/emoji/emoji_unicode_mapping_light';\nimport classNames from 'classnames';\nimport EmojiPickerDropdown from 'flavours/glitch/features/emoji_picker';\nimport AnimatedNumber from 'flavours/glitch/components/animated_number';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring';\nimport { assetHost } from 'flavours/glitch/util/config';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nclass Content extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n  };\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidMount () {\n    this._updateLinks();\n  }\n\n  componentDidUpdate () {\n    this._updateLinks();\n  }\n\n  _updateLinks () {\n    const node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    const links = node.querySelectorAll('a');\n\n    for (var i = 0; i < links.length; ++i) {\n      let link = links[i];\n\n      if (link.classList.contains('status-link')) {\n        continue;\n      }\n\n      link.classList.add('status-link');\n\n      let mention = this.props.announcement.get('mentions').find(item => link.href === item.get('url'));\n\n      if (mention) {\n        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);\n        link.setAttribute('title', mention.get('acct'));\n      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {\n        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);\n      } else {\n        let status = this.props.announcement.get('statuses').find(item => link.href === item.get('url'));\n        if (status) {\n          link.addEventListener('click', this.onStatusClick.bind(this, status), false);\n        }\n        link.setAttribute('title', link.href);\n        link.classList.add('unhandled-link');\n      }\n\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  }\n\n  onMentionClick = (mention, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${mention.get('acct')}`);\n    }\n  }\n\n  onHashtagClick = (hashtag, e) => {\n    hashtag = hashtag.replace(/^#/, '');\n\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/tags/${hashtag}`);\n    }\n  }\n\n  onStatusClick = (status, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${status.getIn(['account', 'acct'])}/${status.get('id')}`);\n    }\n  }\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n\n    return (\n      <div\n        className='announcements__item__content translate'\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: announcement.get('contentHtml') }}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      />\n    );\n  }\n\n}\n\nclass Emoji extends React.PureComponent {\n\n  static propTypes = {\n    emoji: PropTypes.string.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    hovered: PropTypes.bool.isRequired,\n  };\n\n  render () {\n    const { emoji, emojiMap, hovered } = this.props;\n\n    if (unicodeMapping[emoji]) {\n      const { filename, shortCode } = unicodeMapping[this.props.emoji];\n      const title = shortCode ? `:${shortCode}:` : '';\n\n      return (\n        <img\n          draggable='false'\n          className='emojione'\n          alt={emoji}\n          title={title}\n          src={`${assetHost}/emoji/${filename}.svg`}\n        />\n      );\n    } else if (emojiMap.get(emoji)) {\n      const filename  = (autoPlayGif || hovered) ? emojiMap.getIn([emoji, 'url']) : emojiMap.getIn([emoji, 'static_url']);\n      const shortCode = `:${emoji}:`;\n\n      return (\n        <img\n          draggable='false'\n          className='emojione custom-emoji'\n          alt={shortCode}\n          title={shortCode}\n          src={filename}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass Reaction extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reaction: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    style: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleClick = () => {\n    const { reaction, announcementId, addReaction, removeReaction } = this.props;\n\n    if (reaction.get('me')) {\n      removeReaction(announcementId, reaction.get('name'));\n    } else {\n      addReaction(announcementId, reaction.get('name'));\n    }\n  }\n\n  handleMouseEnter = () => this.setState({ hovered: true })\n\n  handleMouseLeave = () => this.setState({ hovered: false })\n\n  render () {\n    const { reaction } = this.props;\n\n    let shortCode = reaction.get('name');\n\n    if (unicodeMapping[shortCode]) {\n      shortCode = unicodeMapping[shortCode].shortCode;\n    }\n\n    return (\n      <button className={classNames('reactions-bar__item', { active: reaction.get('me') })} onClick={this.handleClick} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} title={`:${shortCode}:`} style={this.props.style}>\n        <span className='reactions-bar__item__emoji'><Emoji hovered={this.state.hovered} emoji={reaction.get('name')} emojiMap={this.props.emojiMap} /></span>\n        <span className='reactions-bar__item__count'><AnimatedNumber value={reaction.get('count')} /></span>\n      </button>\n    );\n  }\n\n}\n\nclass ReactionsBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reactions: ImmutablePropTypes.list.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleEmojiPick = data => {\n    const { addReaction, announcementId } = this.props;\n    addReaction(announcementId, data.native.replace(/:/g, ''));\n  }\n\n  willEnter () {\n    return { scale: reduceMotion ? 1 : 0 };\n  }\n\n  willLeave () {\n    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };\n  }\n\n  render () {\n    const { reactions } = this.props;\n    const visibleReactions = reactions.filter(x => x.get('count') > 0);\n\n    const styles = visibleReactions.map(reaction => ({\n      key: reaction.get('name'),\n      data: reaction,\n      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },\n    })).toArray();\n\n    return (\n      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>\n        {items => (\n          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>\n            {items.map(({ key, data, style }) => (\n              <Reaction\n                key={key}\n                reaction={data}\n                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}\n                announcementId={this.props.announcementId}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                emojiMap={this.props.emojiMap}\n              />\n            ))}\n\n            {visibleReactions.size < 8 && <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={<Icon id='plus' />} />}\n          </div>\n        )}\n      </TransitionMotion>\n    );\n  }\n\n}\n\nclass Announcement extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    selected: PropTypes.bool,\n  };\n\n  state = {\n    unread: !this.props.announcement.get('read'),\n  };\n\n  componentDidUpdate () {\n    const { selected, announcement } = this.props;\n    if (!selected && this.state.unread !== !announcement.get('read')) {\n      this.setState({ unread: !announcement.get('read') });\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n    const { unread } = this.state;\n    const startsAt = announcement.get('starts_at') && new Date(announcement.get('starts_at'));\n    const endsAt = announcement.get('ends_at') && new Date(announcement.get('ends_at'));\n    const now = new Date();\n    const hasTimeRange = startsAt && endsAt;\n    const skipYear = hasTimeRange && startsAt.getFullYear() === endsAt.getFullYear() && endsAt.getFullYear() === now.getFullYear();\n    const skipEndDate = hasTimeRange && startsAt.getDate() === endsAt.getDate() && startsAt.getMonth() === endsAt.getMonth() && startsAt.getFullYear() === endsAt.getFullYear();\n    const skipTime = announcement.get('all_day');\n\n    return (\n      <div className='announcements__item'>\n        <strong className='announcements__item__range'>\n          <FormattedMessage id='announcement.announcement' defaultMessage='Announcement' />\n          {hasTimeRange && <span> · <FormattedDate value={startsAt} hour12={false} year={(skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month='short' day='2-digit' hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /> - <FormattedDate value={endsAt} hour12={false} year={(skipYear || endsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month={skipEndDate ? undefined : 'short'} day={skipEndDate ? undefined : '2-digit'} hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /></span>}\n        </strong>\n\n        <Content announcement={announcement} />\n\n        <ReactionsBar\n          reactions={announcement.get('reactions')}\n          announcementId={announcement.get('id')}\n          addReaction={this.props.addReaction}\n          removeReaction={this.props.removeReaction}\n          emojiMap={this.props.emojiMap}\n        />\n\n        {unread && <span className='announcements__item__unread' />}\n      </div>\n    );\n  }\n\n}\n\nexport default @injectIntl\nclass Announcements extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcements: ImmutablePropTypes.list,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    dismissAnnouncement: PropTypes.func.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.announcements.size > 0 && state.index >= props.announcements.size) {\n      return { index: props.announcements.size - 1 };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount () {\n    this._markAnnouncementAsRead();\n  }\n\n  componentDidUpdate () {\n    this._markAnnouncementAsRead();\n  }\n\n  _markAnnouncementAsRead () {\n    const { dismissAnnouncement, announcements } = this.props;\n    const { index } = this.state;\n    const announcement = announcements.get(index);\n    if (!announcement.get('read')) dismissAnnouncement(announcement.get('id'));\n  }\n\n  handleChangeIndex = index => {\n    this.setState({ index: index % this.props.announcements.size });\n  }\n\n  handleNextClick = () => {\n    this.setState({ index: (this.state.index + 1) % this.props.announcements.size });\n  }\n\n  handlePrevClick = () => {\n    this.setState({ index: (this.props.announcements.size + this.state.index - 1) % this.props.announcements.size });\n  }\n\n  render () {\n    const { announcements, intl } = this.props;\n    const { index } = this.state;\n\n    if (announcements.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='announcements'>\n        <img className='announcements__mastodon' alt='' draggable='false' src={mascot || elephantUIPlane} />\n\n        <div className='announcements__container'>\n          <ReactSwipeableViews animateHeight={!reduceMotion} adjustHeight={reduceMotion} index={index} onChangeIndex={this.handleChangeIndex}>\n            {announcements.map((announcement, idx) => (\n              <Announcement\n                key={announcement.get('id')}\n                announcement={announcement}\n                emojiMap={this.props.emojiMap}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                intl={intl}\n                selected={index === idx}\n                disabled={disableSwiping}\n              />\n            ))}\n          </ReactSwipeableViews>\n\n          {announcements.size > 1 && (\n            <div className='announcements__pagination'>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.previous)} icon='chevron-left' onClick={this.handlePrevClick} size={13} />\n              <span>{index + 1} / {announcements.size}</span>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.next)} icon='chevron-right' onClick={this.handleNextClick} size={13} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { addReaction, removeReaction, dismissAnnouncement } from 'flavours/glitch/actions/announcements';\nimport Announcements from '../components/announcements';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\n\nconst customEmojiMap = createSelector([state => state.get('custom_emojis')], items => items.reduce((map, emoji) => map.set(emoji.get('shortcode'), emoji), ImmutableMap()));\n\nconst mapStateToProps = state => ({\n  announcements: state.getIn(['announcements', 'items']),\n  emojiMap: customEmojiMap(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dismissAnnouncement: id => dispatch(dismissAnnouncement(id)),\n  addReaction: (id, name) => dispatch(addReaction(id, name)),\n  removeReaction: (id, name) => dispatch(removeReaction(id, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Announcements);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from 'flavours/glitch/actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'flavours/glitch/actions/announcements';\nimport AnnouncementsContainer from 'flavours/glitch/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'flavours/glitch/components/icon_with_badge';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  }\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n\n    let announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-pressed={showAnnouncements ? 'true' : 'false'}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} name='home' label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`home_timeline-${columnId}`}\n          onLoadMore={this.handleLoadMore}\n          timelineId='home'\n          emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up. {suggestions}' values={{ suggestions: <Link to='/start'><FormattedMessage id='empty_column.home.suggestions' defaultMessage='See some suggestions' /></Link> }} />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n","export default __webpack_public_path__ + \"media/images/elephant_ui_plane-72f8702db120a51a1cdbc4fb7f5ef59d.svg\";"],"sourceRoot":""}