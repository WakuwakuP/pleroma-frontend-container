{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/account_timeline/index.js"],"names":["emptyList","ImmutableList","RemoteHint","url","resource","id","defaultMessage","AccountTimeline","connect","state","params","acct","withReplies","accountId","getIn","isLoading","path","remote","remoteUrl","isAccount","statusIds","featuredStatusIds","hasMore","suspended","hidden","getAccountHidden","ImmutablePureComponent","handleHeaderClick","this","column","scrollTop","handleLoadMore","maxId","props","dispatch","expandAccountTimeline","setRef","c","_load","fetchAccount","expandAccountFeaturedTimeline","componentDidMount","lookupAccount","componentDidUpdate","prevProps","componentWillReceiveProps","nextProps","render","multiColumn","emptyMessage","forceEmptyState","isEmpty","remoteMessage","ref","name","onClick","prepend","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"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","file":"js/flavours/glitch/async/account_timeline-9e729985a5889f9ce8f4.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { lookupAccount, fetchAccount } from 'flavours/glitch/actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from 'flavours/glitch/actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from 'flavours/glitch/components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport TimelineHint from 'flavours/glitch/components/timeline_hint';\nimport LimitedAccountHint from './components/limited_account_hint';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', acct]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], ImmutableList()),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], ImmutableList()),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore:   state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n    dispatch(expandAccountTimeline(accountId, { withReplies }));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef} name='account'>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}