{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/components/check.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/components/option.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/category.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/components/status_check_box.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/containers/status_check_box_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/statuses.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/rules.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/comment.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/report/thanks.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/ui/components/report_modal.js"],"names":["Check","width","height","viewBox","d","fill","fillRule","Option","React","PureComponent","handleKeyPress","e","value","checked","onToggle","this","props","key","stopPropagation","preventDefault","handleChange","target","render","name","label","labelComponent","description","multiple","className","type","onChange","classNames","active","checkbox","tabIndex","role","onKeyPress","aria-checked","aria-label","messages","defineMessages","dislike","dislike_description","spam","spam_description","violation","violation_description","other","other_description","status","account","Category","connect","state","rules","get","injectIntl","handleNextClick","onNextStep","category","handleCategoryToggle","onChangeCategory","startedFrom","intl","options","size","Fragment","id","defaultMessage","values","formatMessage","map","item","onClick","disabled","StatusCheckBox","handleStatusesToggle","timestamp","media","revealed","getStatus","makeGetStatus","Statuses","accountId","availableStatusIds","OrderedSet","getIn","isLoading","selectedStatusIds","union","statusId","includes","Rules","handleRulesToggle","selectedRuleIds","placeholder","Comment","handleClick","onSubmit","onChangeComment","handleKeyDown","keyCode","ctrlKey","metaKey","handleForwardChange","onChangeForward","comment","isRemote","forward","domain","isSubmitting","onKeyDown","Thanks","handleCloseClick","onClose","handleUnfollowClick","dispatch","unfollowAccount","handleMuteClick","muteAccount","handleBlockClick","blockAccount","submitted","secondary","close","ReportModal","getAccount","makeGetAccount","ImmutablePureComponent","step","isSubmitted","handleSubmit","setState","submitReport","account_id","status_ids","toArray","rule_ids","handleSuccess","handleFail","handleStatusToggle","add","remove","handleRuleToggle","ruleId","handleChangeCategory","handleChangeComment","handleChangeForward","handleNextStep","componentDidMount","fetchRelationships","expandAccountTimeline","withReplies","fetchRules","split","stepComponent","title","icon","propTypes","PropTypes","string","isRequired","func","object","ImmutablePropTypes"],"mappings":"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","file":"js/flavours/glitch/async/report_modal-d575b611671463b159d9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Check = () => (\n  <svg width='14' height='11' viewBox='0 0 14 11'>\n    <path d='M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0' fill='currentColor' fillRule='evenodd' />\n  </svg>\n);\n\nexport default Check;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Check from 'flavours/glitch/components/check';\n\nexport default class Option extends React.PureComponent {\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    label: PropTypes.node,\n    description: PropTypes.node,\n    onToggle: PropTypes.func,\n    multiple: PropTypes.bool,\n    labelComponent: PropTypes.node,\n  };\n\n  handleKeyPress = e => {\n    const { value, checked, onToggle } = this.props;\n\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.stopPropagation();\n      e.preventDefault();\n      onToggle(value, !checked);\n    }\n  }\n\n  handleChange = e => {\n    const { value, onToggle } = this.props;\n    onToggle(value, e.target.checked);\n  }\n\n  render () {\n    const { name, value, checked, label, labelComponent, description, multiple } = this.props;\n\n    return (\n      <label className='dialog-option poll__option selectable'>\n        <input type={multiple ? 'checkbox' : 'radio'} name={name} value={value} checked={checked} onChange={this.handleChange} />\n\n        <span\n          className={classNames('poll__input', { active: checked, checkbox: multiple })}\n          tabIndex='0'\n          role='radio'\n          onKeyPress={this.handleKeyPress}\n          aria-checked={checked}\n          aria-label={label}\n        >{checked && <Check />}</span>\n\n        {labelComponent ? labelComponent : (\n          <span className='poll__option__text'>\n            <strong>{label}</strong>\n            {description}\n          </span>\n        )}\n      </label>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Button from 'flavours/glitch/components/button';\nimport Option from './components/option';\n\nconst messages = defineMessages({\n  dislike: { id: 'report.reasons.dislike', defaultMessage: 'I don\\'t like it' },\n  dislike_description: { id: 'report.reasons.dislike_description', defaultMessage: 'It is not something you want to see' },\n  spam: { id: 'report.reasons.spam', defaultMessage: 'It\\'s spam' },\n  spam_description: { id: 'report.reasons.spam_description', defaultMessage: 'Malicious links, fake engagement, or repetitive replies' },\n  violation: { id: 'report.reasons.violation', defaultMessage: 'It violates server rules' },\n  violation_description: { id: 'report.reasons.violation_description', defaultMessage: 'You are aware that it breaks specific rules' },\n  other: { id: 'report.reasons.other', defaultMessage: 'It\\'s something else' },\n  other_description: { id: 'report.reasons.other_description', defaultMessage: 'The issue does not fit into other categories' },\n  status: { id: 'report.category.title_status', defaultMessage: 'post' },\n  account: { id: 'report.category.title_account', defaultMessage: 'profile' },\n});\n\nconst mapStateToProps = state => ({\n  rules: state.get('rules'),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Category extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    category: PropTypes.string,\n    onChangeCategory: PropTypes.func.isRequired,\n    startedFrom: PropTypes.oneOf(['status', 'account']),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep, category } = this.props;\n\n    switch(category) {\n    case 'dislike':\n      onNextStep('thanks');\n      break;\n    case 'violation':\n      onNextStep('rules');\n      break;\n    default:\n      onNextStep('statuses');\n      break;\n    }\n  };\n\n  handleCategoryToggle = (value, checked) => {\n    const { onChangeCategory } = this.props;\n\n    if (checked) {\n      onChangeCategory(value);\n    }\n  };\n\n  render () {\n    const { category, startedFrom, rules, intl } = this.props;\n\n    const options = rules.size > 0 ? [\n      'spam',\n      'violation',\n      'other',\n    ] : [\n      'spam',\n      'other',\n    ];\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.category.title' defaultMessage=\"Tell us what's going on with this {type}\" values={{ type: intl.formatMessage(messages[startedFrom]) }} /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.category.subtitle' defaultMessage='Choose the best match' /></p>\n\n        <div>\n          {options.map(item => (\n            <Option\n              key={item}\n              name='category'\n              value={item}\n              checked={category === item}\n              onToggle={this.handleCategoryToggle}\n              label={intl.formatMessage(messages[item])}\n              description={intl.formatMessage(messages[`${item}_description`])}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={category === null}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusContent from 'flavours/glitch/components/status_content';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\nimport Option from './option';\nimport MediaAttachments from 'flavours/glitch/components/media_attachments';\n\nexport default class StatusCheckBox extends React.PureComponent {\n\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleStatusesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { status, checked } = this.props;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    const labelComponent = (\n      <div className='status-check-box__status poll__option__text'>\n        <div className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <Avatar account={status.get('account')} size={46} />\n          </div>\n\n          <div><DisplayName account={status.get('account')} /> · <RelativeTimestamp timestamp={status.get('created_at')} /></div>\n        </div>\n\n        <StatusContent status={status} media={<MediaAttachments status={status} revealed={false} />} />\n      </div>\n    );\n\n    return (\n      <Option\n        name='status_ids'\n        value={status.get('id')}\n        checked={checked}\n        onToggle={this.handleStatusesToggle}\n        label={status.get('search_index')}\n        labelComponent={labelComponent}\n        multiple\n      />\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport StatusCheckBox from '../components/status_check_box';\nimport { makeGetStatus } from 'flavours/glitch/selectors';\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, { id }) => ({\n    status: getStatus(state, { id }),\n  });\n\n  return mapStateToProps;\n};\n\nexport default connect(makeMapStateToProps)(StatusCheckBox);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport StatusCheckBox from 'flavours/glitch/features/report/containers/status_check_box_container';\nimport { OrderedSet } from 'immutable';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'flavours/glitch/components/button';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  availableStatusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])),\n  isLoading: state.getIn(['timelines', `account:${accountId}:with_replies`, 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Statuses extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    accountId: PropTypes.string.isRequired,\n    availableStatusIds: ImmutablePropTypes.set.isRequired,\n    selectedStatusIds: ImmutablePropTypes.set.isRequired,\n    isLoading: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('comment');\n  };\n\n  render () {\n    const { availableStatusIds, selectedStatusIds, onToggle, isLoading } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.statuses.title' defaultMessage='Are there any posts that back up this report?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.statuses.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div className='report-dialog-modal__statuses'>\n          {isLoading ? <LoadingIndicator /> : availableStatusIds.union(selectedStatusIds).map(statusId => (\n            <StatusCheckBox\n              id={statusId}\n              key={statusId}\n              checked={selectedStatusIds.includes(statusId)}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'flavours/glitch/components/button';\nimport Option from './components/option';\n\nconst mapStateToProps = state => ({\n  rules: state.get('rules'),\n});\n\nexport default @connect(mapStateToProps)\nclass Rules extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    selectedRuleIds: ImmutablePropTypes.set.isRequired,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('statuses');\n  };\n\n  handleRulesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { rules, selectedRuleIds } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.rules.title' defaultMessage='Which rules are being violated?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.rules.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div>\n          {rules.map(item => (\n            <Option\n              key={item.get('id')}\n              name='rule_ids'\n              value={item.get('id')}\n              checked={selectedRuleIds.includes(item.get('id'))}\n              onToggle={this.handleRulesToggle}\n              label={item.get('text')}\n              multiple\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={selectedRuleIds.size < 1}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport Button from 'flavours/glitch/components/button';\nimport Toggle from 'react-toggle';\n\nconst messages = defineMessages({\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Type or paste additional comments' },\n});\n\nexport default @injectIntl\nclass Comment extends React.PureComponent {\n\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    comment: PropTypes.string.isRequired,\n    onChangeComment: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isSubmitting: PropTypes.bool,\n    forward: PropTypes.bool,\n    isRemote: PropTypes.bool,\n    domain: PropTypes.string,\n    onChangeForward: PropTypes.func.isRequired,\n  };\n\n  handleClick = () => {\n    const { onSubmit } = this.props;\n    onSubmit();\n  };\n\n  handleChange = e => {\n    const { onChangeComment } = this.props;\n    onChangeComment(e.target.value);\n  };\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      this.handleClick();\n    }\n  };\n\n  handleForwardChange = e => {\n    const { onChangeForward } = this.props;\n    onChangeForward(e.target.checked);\n  };\n\n  render () {\n    const { comment, isRemote, forward, domain, isSubmitting, intl } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.comment.title' defaultMessage='Is there anything else you think we should know?' /></h3>\n\n        <textarea\n          className='report-dialog-modal__textarea'\n          placeholder={intl.formatMessage(messages.placeholder)}\n          value={comment}\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n          disabled={isSubmitting}\n        />\n\n        {isRemote && (\n          <React.Fragment>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n            <label className='report-dialog-modal__toggle'>\n              <Toggle checked={forward} disabled={isSubmitting} onChange={this.handleForwardChange} />\n              <FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} />\n            </label>\n          </React.Fragment>\n        )}\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleClick} disabled={isSubmitting}><FormattedMessage id='report.submit' defaultMessage='Submit report' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'flavours/glitch/components/button';\nimport { connect } from 'react-redux';\nimport {\n  unfollowAccount,\n  muteAccount,\n  blockAccount,\n} from 'flavours/glitch/actions/accounts';\n\nconst mapStateToProps = () => ({});\n\nexport default @connect(mapStateToProps)\nclass Thanks extends React.PureComponent {\n\n  static propTypes = {\n    submitted: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleCloseClick = () => {\n    const { onClose } = this.props;\n    onClose();\n  };\n\n  handleUnfollowClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(unfollowAccount(account.get('id')));\n    onClose();\n  };\n\n  handleMuteClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(muteAccount(account.get('id')));\n    onClose();\n  };\n\n  handleBlockClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(blockAccount(account.get('id')));\n    onClose();\n  };\n\n  render () {\n    const { account, submitted } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'>{submitted ? <FormattedMessage id='report.thanks.title_actionable' defaultMessage=\"Thanks for reporting, we'll look into this.\" /> : <FormattedMessage id='report.thanks.title' defaultMessage=\"Don't want to see this?\" />}</h3>\n        <p className='report-dialog-modal__lead'>{submitted ? <FormattedMessage id='report.thanks.take_action_actionable' defaultMessage='While we review this, you can take action against @{name}:' values={{ name: account.get('username') }} /> : <FormattedMessage id='report.thanks.take_action' defaultMessage='Here are your options for controlling what you see on Mastodon:' />}</p>\n\n        {account.getIn(['relationship', 'following']) && (\n          <React.Fragment>\n            <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='report.unfollow' defaultMessage='Unfollow @{name}' values={{ name: account.get('username') }} /></h4>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.unfollow_explanation' defaultMessage='You are following this account. To not see their posts in your home feed anymore, unfollow them.' /></p>\n            <Button secondary onClick={this.handleUnfollowClick}><FormattedMessage id='account.unfollow' defaultMessage='Unfollow' /></Button>\n            <hr />\n          </React.Fragment>\n        )}\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.mute' defaultMessage='Mute @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.mute_explanation' defaultMessage='You will not see their posts. They can still follow you and see your posts and will not know that they are muted.' /></p>\n        <Button secondary onClick={this.handleMuteClick}>{!account.getIn(['relationship', 'muting']) ? <FormattedMessage id='report.mute' defaultMessage='Mute' /> : <FormattedMessage id='account.muted' defaultMessage='Muted' />}</Button>\n\n        <hr />\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.block' defaultMessage='Block @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.block_explanation' defaultMessage='You will not see their posts. They will not be able to see your posts or follow you. They will be able to tell that they are blocked.' /></p>\n        <Button secondary onClick={this.handleBlockClick}>{!account.getIn(['relationship', 'blocking']) ? <FormattedMessage id='report.block' defaultMessage='Block' /> : <FormattedMessage id='account.blocked' defaultMessage='Blocked' />}</Button>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleCloseClick}><FormattedMessage id='report.close' defaultMessage='Done' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { submitReport } from 'flavours/glitch/actions/reports';\nimport { expandAccountTimeline } from 'flavours/glitch/actions/timelines';\nimport { fetchRules } from 'flavours/glitch/actions/rules';\nimport { fetchRelationships } from 'flavours/glitch/actions/accounts';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { OrderedSet } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport Category from 'flavours/glitch/features/report/category';\nimport Statuses from 'flavours/glitch/features/report/statuses';\nimport Rules from 'flavours/glitch/features/report/rules';\nimport Comment from 'flavours/glitch/features/report/comment';\nimport Thanks from 'flavours/glitch/features/report/thanks';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    statusId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    step: 'category',\n    selectedStatusIds: OrderedSet(this.props.statusId ? [this.props.statusId] : []),\n    comment: '',\n    category: null,\n    selectedRuleIds: OrderedSet(),\n    forward: true,\n    isSubmitting: false,\n    isSubmitted: false,\n  };\n\n  handleSubmit = () => {\n    const { dispatch, accountId } = this.props;\n    const { selectedStatusIds, comment, category, selectedRuleIds, forward } = this.state;\n\n    this.setState({ isSubmitting: true });\n\n    dispatch(submitReport({\n      account_id: accountId,\n      status_ids: selectedStatusIds.toArray(),\n      comment,\n      forward,\n      category,\n      rule_ids: selectedRuleIds.toArray(),\n    }, this.handleSuccess, this.handleFail));\n  };\n\n  handleSuccess = () => {\n    this.setState({ isSubmitting: false, isSubmitted: true, step: 'thanks' });\n  };\n\n  handleFail = () => {\n    this.setState({ isSubmitting: false });\n  };\n\n  handleStatusToggle = (statusId, checked) => {\n    const { selectedStatusIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedStatusIds: selectedStatusIds.add(statusId) });\n    } else {\n      this.setState({ selectedStatusIds: selectedStatusIds.remove(statusId) });\n    }\n  };\n\n  handleRuleToggle = (ruleId, checked) => {\n    const { selectedRuleIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedRuleIds: selectedRuleIds.add(ruleId) });\n    } else {\n      this.setState({ selectedRuleIds: selectedRuleIds.remove(ruleId) });\n    }\n  }\n\n  handleChangeCategory = category => {\n    this.setState({ category });\n  };\n\n  handleChangeComment = comment => {\n    this.setState({ comment });\n  };\n\n  handleChangeForward = forward => {\n    this.setState({ forward });\n  };\n\n  handleNextStep = step => {\n    this.setState({ step });\n  };\n\n  componentDidMount () {\n    const { dispatch, accountId } = this.props;\n\n    dispatch(fetchRelationships([accountId]));\n    dispatch(expandAccountTimeline(accountId, { withReplies: true }));\n    dispatch(fetchRules());\n  }\n\n  render () {\n    const {\n      accountId,\n      account,\n      intl,\n      onClose,\n    } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const {\n      step,\n      selectedStatusIds,\n      selectedRuleIds,\n      comment,\n      forward,\n      category,\n      isSubmitting,\n      isSubmitted,\n    } = this.state;\n\n    const domain   = account.get('acct').split('@')[1];\n    const isRemote = !!domain;\n\n    let stepComponent;\n\n    switch(step) {\n    case 'category':\n      stepComponent = (\n        <Category\n          onNextStep={this.handleNextStep}\n          startedFrom={this.props.statusId ? 'status' : 'account'}\n          category={category}\n          onChangeCategory={this.handleChangeCategory}\n        />\n      );\n      break;\n    case 'rules':\n      stepComponent = (\n        <Rules\n          onNextStep={this.handleNextStep}\n          selectedRuleIds={selectedRuleIds}\n          onToggle={this.handleRuleToggle}\n        />\n      );\n      break;\n    case 'statuses':\n      stepComponent = (\n        <Statuses\n          onNextStep={this.handleNextStep}\n          accountId={accountId}\n          selectedStatusIds={selectedStatusIds}\n          onToggle={this.handleStatusToggle}\n        />\n      );\n      break;\n    case 'comment':\n      stepComponent = (\n        <Comment\n          onSubmit={this.handleSubmit}\n          isSubmitting={isSubmitting}\n          isRemote={isRemote}\n          comment={comment}\n          forward={forward}\n          domain={domain}\n          onChangeComment={this.handleChangeComment}\n          onChangeForward={this.handleChangeForward}\n        />\n      );\n      break;\n    case 'thanks':\n      stepComponent = (\n        <Thanks\n          submitted={isSubmitted}\n          account={account}\n          onClose={onClose}\n        />\n      );\n    }\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          {stepComponent}\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}