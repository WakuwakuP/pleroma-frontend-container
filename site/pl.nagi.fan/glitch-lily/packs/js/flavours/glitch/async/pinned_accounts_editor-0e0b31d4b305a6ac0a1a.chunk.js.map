{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/pinned_accounts_editor/containers/account_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/pinned_accounts_editor/containers/search_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/pinned_accounts_editor/index.js"],"names":["injectIntl","connect","getAccount","makeGetAccount","state","accountId","added","account","getIn","includes","dispatch","onRemove","unpinAccount","onAdd","pinAccount","Account","value","onSubmit","fetchPinnedAccountsSuggestions","onClear","clearPinnedAccountsSuggestions","onChange","changePinnedAccountsSuggestions","Search","PinnedAccountsEditor","accountIds","searchAccountIds","onInitialize","fetchPinnedAccounts","onReset","resetPinnedAccountsEditor","ImmutablePureComponent","componentDidMount","this","props","componentWillUnmount","render","showSearch","size","className","id","defaultMessage","map","role","tabIndex","onClick","defaultStyle","x","style","spring","stiffness","damping","transform","visibility","propTypes","onClose","PropTypes","func","isRequired","intl","object","title","string","ImmutablePropTypes","list"],"mappings":"gPAuBeA,kBAAWC,mBAhBE,KAC1B,MAAMC,EAAaC,cAOnB,MALwB,CAACC,EAAD,SAAQ,UAAEC,EAAF,MAAaC,GAArB,QAAkC,CACxDC,QAASL,EAAWE,EAAOC,GAC3BC,WAAwB,IAAVA,EAAwBF,EAAMI,MAAM,CAAC,uBAAwB,WAAY,UAAUC,SAASJ,GAAaC,OAMhG,CAACI,EAAD,SAAW,UAAEL,GAAb,QAA8B,CACvDM,SAAU,IAAMD,EAASE,aAAaP,IACtCQ,MAAO,IAAMH,EAASI,aAAWT,OAGTJ,CAAiDc,M,UCH5Df,I,IAAAA,cAAWC,mBAVFG,IAAK,CAC3BY,MAAOZ,EAAMI,MAAM,CAAC,uBAAwB,cAAe,cAGlCE,IAAQ,CACjCO,SAAUD,GAASN,EAASQ,aAA+BF,IAC3DG,QAAS,IAAMT,EAASU,eACxBC,SAAUL,GAASN,EAASY,YAAgCN,OAGpCf,CAA6CsB,M,8BCKjEC,EAFUvB,mBAXQG,IAAK,CAC3BqB,WAAYrB,EAAMI,MAAM,CAAC,uBAAwB,WAAY,UAC7DkB,iBAAkBtB,EAAMI,MAAM,CAAC,uBAAwB,cAAe,cAG7CE,IAAQ,CACjCiB,aAAc,IAAMjB,EAASkB,gBAC7BT,QAAS,IAAMT,EAASU,eACxBS,QAAS,IAAMnB,EAASoB,mB,GAIzB9B,c,EADc,cAEoB+B,IAajCC,oBACE,MAAM,aAAEL,GAAiBM,KAAKC,MAC9BP,IAGFQ,uBACE,MAAM,QAAEN,GAAYI,KAAKC,MACzBL,IAGFO,SACE,MAAM,WAAEX,EAAF,iBAAcC,EAAd,QAAgCP,GAAYc,KAAKC,MACjDG,EAAaX,EAAiBY,KAAO,EAE3C,OACE,mBAAKC,UAAU,sCAAf,EACE,2BAAI,YAAC,IAAD,CAAkBC,GAAG,6CAA6CC,eAAe,uBAErF,YAAC,EAAD,IAEA,mBAAKF,UAAU,sBAAf,EACE,mBAAKA,UAAU,4CAAf,EACGd,EAAWiB,KAAIrC,GAAa,YAAC,EAAD,CAAkCA,UAAWA,EAAWC,OAAK,GAAtCD,MAGrDgC,GAAc,mBAAKM,KAAK,SAASC,SAAS,KAAKL,UAAU,mBAAmBM,QAAS1B,IAEtF,YAAC,IAAD,CAAQ2B,aAAc,CAAEC,GAAI,KAAOC,MAAO,CAAED,EAAGE,IAAOZ,EAAa,GAAK,IAAK,CAAEa,UAAW,IAAKC,QAAS,YAAxG,GACG,QAAC,EAAEJ,GAAH,SACE,mBAAKR,UAAU,yBAAyBS,MAAO,CAAEI,UAAiB,IAANL,EAAU,KAAV,cAA+BA,EAA/B,KAAsCM,YAAmB,MAAPN,EAAa,SAAW,iBAAtI,EACErB,EAAiBgB,KAAIrC,GAAa,YAAC,EAAD,CAAkCA,UAAWA,GAAtBA,cAzCjEiD,UAAY,CACjBC,QAASC,IAAUC,KAAKC,WACxBC,KAAMH,IAAUI,OAAOF,WACvB/B,aAAc6B,IAAUC,KAAKC,WAC7BvC,QAASqC,IAAUC,KAAKC,WACxB7B,QAAS2B,IAAUC,KAAKC,WACxBG,MAAOL,IAAUM,OAAOJ,WACxBjC,WAAYsC,IAAmBC,KAAKN,WACpChC,iBAAkBqC,IAAmBC,KAAKN,Y","file":"js/flavours/glitch/async/pinned_accounts_editor-0e0b31d4b305a6ac0a1a.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport { injectIntl } from 'react-intl';\nimport { pinAccount, unpinAccount } from 'flavours/glitch/actions/accounts';\nimport Account from 'flavours/glitch/features/list_editor/components/account';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['pinnedAccountsEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(unpinAccount(accountId)),\n  onAdd: () => dispatch(pinAccount(accountId)),\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Account));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport {\n  fetchPinnedAccountsSuggestions,\n  clearPinnedAccountsSuggestions,\n  changePinnedAccountsSuggestions\n} from '../../../actions/accounts';\nimport Search from 'flavours/glitch/features/list_editor/components/search';\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['pinnedAccountsEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchPinnedAccountsSuggestions(value)),\n  onClear: () => dispatch(clearPinnedAccountsSuggestions()),\n  onChange: value => dispatch(changePinnedAccountsSuggestions(value)),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Search));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { fetchPinnedAccounts, clearPinnedAccountsSuggestions, resetPinnedAccountsEditor } from 'flavours/glitch/actions/accounts';\nimport AccountContainer from './containers/account_container';\nimport SearchContainer from './containers/search_container';\nimport Motion from 'flavours/glitch/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['pinnedAccountsEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['pinnedAccountsEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: () => dispatch(fetchPinnedAccounts()),\n  onClear: () => dispatch(clearPinnedAccountsSuggestions()),\n  onReset: () => dispatch(resetPinnedAccountsEditor()),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass PinnedAccountsEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize } = this.props;\n    onInitialize();\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountIds, searchAccountIds, onClear } = this.props;\n    const showSearch = searchAccountIds.size > 0;\n\n    return (\n      <div className='modal-root__modal list-editor'>\n        <h4><FormattedMessage id='endorsed_accounts_editor.endorsed_accounts' defaultMessage='Featured accounts' /></h4>\n\n        <SearchContainer />\n\n        <div className='drawer__pager'>\n          <div className='drawer__inner list-editor__accounts'>\n            {accountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} added />)}\n          </div>\n\n          {showSearch && <div role='button' tabIndex='-1' className='drawer__backdrop' onClick={onClear} />}\n\n          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) =>\n              (<div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                {searchAccountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} />)}\n              </div>)\n            }\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}