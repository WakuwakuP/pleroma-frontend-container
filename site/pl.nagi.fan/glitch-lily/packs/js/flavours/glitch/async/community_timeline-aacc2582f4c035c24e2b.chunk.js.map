{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/community_timeline/components/column_settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/community_timeline/containers/column_settings_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/community_timeline/index.js"],"names":["messages","defineMessages","filter_regex","settings","ColumnSettings","injectIntl","React","PureComponent","render","onChange","intl","this","props","className","settingPath","label","id","defaultMessage","formatMessage","connect","state","columnId","uuid","columns","getIn","index","findIndex","c","get","dispatch","key","checked","changeColumnParams","changeSetting","title","CommunityTimeline","onlyMedia","timelineState","hasUnread","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","multiColumn","pinned","ref","name","bindToDocument","icon","active","onPin","onMove","onClick","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","defaultProps","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/community_timeline-aacc2582f4c035c24e2b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n \nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { expandCommunityTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from 'flavours/glitch/actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n    this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      this.disconnect();\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} name='local' bindToDocument={!multiColumn} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}