{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/lily/components/language-settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/page/item/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/page/deprecated_item/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/page/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/navigation/item/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/navigation/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/local_settings/index.js"],"names":["injectIntl","props","locale","setLocale","useContext","LangSettingsContext","items","localeNames","localeToDisplayName","useMemo","map","forEach","code","Intl","DisplayNames","type","of","_","getLangName","settingsLocale","setSettingsLocale","useState","handleChange","useCallback","e","target","value","handleApply","then","window","location","reload","onChange","i","onClick","id","defaultMessage","LocalSettingsPageItem","React","PureComponent","item","options","placeholder","this","length","checked","render","settings","children","dependsOn","dependsOnNot","disabled","enabled","getIn","currentValue","optionElems","opt","optionId","htmlFor","name","onBlur","message","hint","className","messages","defineMessages","layout_auto","layout_auto_hint","layout_desktop","layout_desktop_hint","layout_mobile","layout_mobile_hint","side_arm_none","side_arm_keep","side_arm_copy","side_arm_restrict","regexp","filters_drop","filters_upstream","filters_hide","filters_cw","rewrite_mentions_no","rewrite_mentions_acct","rewrite_mentions_username","pop_in_left","pop_in_right","LocalSettingsPage","pages","intl","formatMessage","disableSwiping","values","settings_page_link","href","preferenceLink","expandSpoilers","index","CurrentPage","handleClick","onNavigate","preventDefault","active","icon","textIcon","title","finalClassName","classNames","iconElem","fixedWidth","role","tabIndex","general","compose","content_warnings","filters","collapsed","media","preferences","close","LocalSettingsNavigation","onClose","preferencesLink","LocalSettings","state","currentIndex","navigateTo","setState","connect","get","dispatch","setting","changeLocalSetting","closeModal"],"mappings":"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","file":"js/flavours/glitch/async/settings_modal-b4291f3f87a20099e021.chunk.js","sourcesContent":["\nimport React, { useCallback, useContext, useState, useMemo } from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { localeNames, LangSettingsContext } from 'lily/utils/locale';\n\nconst getLangName = (code) => {\n  try {\n    return (new Intl.DisplayNames(code, { type: 'language' })).of(code);\n  } catch (_) {\n    return code;\n  }\n};\n\nconst LanguageSettings = (props) => {\n  const { locale, setLocale } = useContext(LangSettingsContext);\n  const items = localeNames;\n\n  const localeToDisplayName = useMemo(() => {\n    const map = {};\n    items.forEach(code => map[code] = getLangName(code));\n    return map\n  }, [items]);\n\n  const [settingsLocale, setSettingsLocale] = useState(locale);\n\n  const handleChange = useCallback((e) => {\n    setSettingsLocale(e.target.value);\n  }, [setSettingsLocale]);\n\n  const handleApply = useCallback(() => {\n    // Locale settings only take effect on next load\n    setLocale(settingsLocale)\n      .then(() => window.location.reload());\n  }, [setLocale, settingsLocale]);\n\n\n  return (\n    <div>\n      <select\n        value={settingsLocale}\n        onChange={handleChange}\n      >\n        { items.map(i => <option key={i} value={i}>{localeToDisplayName[i]}</option>) }\n      </select>\n      <button onClick={handleApply}>\n        { /* XXX: Not really the correct one, but the closest I can find from the messages. */ }\n        <FormattedMessage id='upload_modal.apply' defaultMessage='Apply' />\n      </button>\n    </div>\n  );\n};\n\nexport default injectIntl(LanguageSettings);\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends React.PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    dependsOn: PropTypes.array,\n    dependsOnNot: PropTypes.array,\n    id: PropTypes.string.isRequired,\n    item: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    settings: ImmutablePropTypes.map.isRequired,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n  };\n\n  handleChange = e => {\n    const { target } = e;\n    const { item, onChange, options, placeholder } = this.props;\n    if (options && options.length > 0) onChange(item, target.value);\n    else if (placeholder) onChange(item, target.value);\n    else onChange(item, target.checked);\n  }\n\n  render () {\n    const { handleChange } = this;\n    const { settings, item, id, options, children, dependsOn, dependsOnNot, placeholder, disabled } = this.props;\n    let enabled = !disabled;\n\n    if (dependsOn) {\n      for (let i = 0; i < dependsOn.length; i++) {\n        enabled = enabled && settings.getIn(dependsOn[i]);\n      }\n    }\n    if (dependsOnNot) {\n      for (let i = 0; i < dependsOnNot.length; i++) {\n        enabled = enabled && !settings.getIn(dependsOnNot[i]);\n      }\n    }\n\n    if (options && options.length > 0) {\n      const currentValue = settings.getIn(item);\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label htmlFor={optionId}>\n            <input type='radio'\n              name={id}\n              id={optionId}\n              value={opt.value}\n              onBlur={handleChange}\n              onChange={handleChange}\n              checked={ currentValue === opt.value }\n              disabled={!enabled}\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={settings.getIn(item)}\n                placeholder={placeholder}\n                onChange={handleChange}\n                disabled={!enabled}\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={settings.getIn(item)}\n            onChange={handleChange}\n            disabled={!enabled}\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends React.PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    value: PropTypes.any,\n    placeholder: PropTypes.string,\n  };\n\n  render () {\n    const { id, options, children, placeholder, value } = this.props;\n\n    if (options && options.length > 0) {\n      const currentValue = value;\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label htmlFor={optionId}>\n            <input\n              type='radio'\n              name={id}\n              id={optionId}\n              value={opt.value}\n              checked={currentValue === opt.value}\n              disabled\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={value}\n                placeholder={placeholder}\n                disabled\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={value}\n            disabled\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport LanguageSettings from 'lily/components/language-settings';\n\n//  Our imports\nimport { expandSpoilers, disableSwiping } from 'flavours/glitch/util/initial_state';\nimport { preferenceLink } from 'flavours/glitch/util/backend_links';\nimport LocalSettingsPageItem from './item';\nimport DeprecatedLocalSettingsPageItem from './deprecated_item';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nconst messages = defineMessages({\n  layout_auto: {  id: 'layout.auto', defaultMessage: 'Auto' },\n  layout_auto_hint: {  id: 'layout.hint.auto', defaultMessage: 'Automatically chose layout based on “Enable advanced web interface” setting and screen size.' },\n  layout_desktop: { id: 'layout.desktop', defaultMessage: 'Desktop' },\n  layout_desktop_hint: { id: 'layout.hint.desktop', defaultMessage: 'Use multiple-column layout regardless of the “Enable advanced web interface” setting or screen size.' },\n  layout_mobile: { id: 'layout.single', defaultMessage: 'Mobile' },\n  layout_mobile_hint: { id: 'layout.hint.single', defaultMessage: 'Use single-column layout regardless of the “Enable advanced web interface” setting or screen size.' },\n  side_arm_none: { id: 'settings.side_arm.none', defaultMessage: 'None' },\n  side_arm_keep: { id: 'settings.side_arm_reply_mode.keep', defaultMessage: 'Keep secondary toot button to set privacy' },\n  side_arm_copy: { id: 'settings.side_arm_reply_mode.copy', defaultMessage: 'Copy privacy setting of the toot being replied to' },\n  side_arm_restrict: { id: 'settings.side_arm_reply_mode.restrict', defaultMessage: 'Restrict privacy setting to that of the toot being replied to' },\n  regexp: { id: 'settings.content_warnings.regexp', defaultMessage: 'Regular expression' },\n  filters_drop: { id: 'settings.filtering_behavior.drop', defaultMessage: 'Hide filtered toots completely' },\n  filters_upstream: { id: 'settings.filtering_behavior.upstream', defaultMessage: 'Show \"filtered\" like vanilla Mastodon' },\n  filters_hide: { id: 'settings.filtering_behavior.hide', defaultMessage: 'Show \"filtered\" and add a button to display why' },\n  filters_cw: { id: 'settings.filtering_behavior.cw', defaultMessage: 'Still display the post, and add filtered words to content warning' },\n  rewrite_mentions_no: { id: 'settings.rewrite_mentions_no', defaultMessage: 'Do not rewrite mentions' },\n  rewrite_mentions_acct: { id: 'settings.rewrite_mentions_acct', defaultMessage: 'Rewrite with username and domain (when the account is remote)' },\n  rewrite_mentions_username: { id: 'settings.rewrite_mentions_username', defaultMessage:  'Rewrite with username' },\n  pop_in_left: { id: 'settings.pop_in_left', defaultMessage: 'Left' },\n  pop_in_right: { id: 'settings.pop_in_right', defaultMessage:  'Right' },\n});\n\nexport default @injectIntl\nclass LocalSettingsPage extends React.PureComponent {\n\n  static propTypes = {\n    index    : PropTypes.number,\n    intl     : PropTypes.object.isRequired,\n    onChange : PropTypes.func.isRequired,\n    settings : ImmutablePropTypes.map.isRequired,\n  };\n\n  pages = [\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page general'>\n        <h1><FormattedMessage id='settings.general' defaultMessage='General' /></h1>\n        <LanguageSettings />\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_reply_count']}\n          id='mastodon-settings--reply-count'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_reply_counter' defaultMessage='Display an estimate of the reply count' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['hicolor_privacy_icons']}\n          id='mastodon-settings--hicolor_privacy_icons'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.hicolor_privacy_icons' defaultMessage='High color privacy icons' />\n          <span className='hint'><FormattedMessage id='settings.hicolor_privacy_icons.hint' defaultMessage=\"Display privacy icons in bright and easily distinguishable colors\" /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_boost_missing_media_description']}\n          id='mastodon-settings--confirm_boost_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_boost_missing_media_description' defaultMessage='Show confirmation dialog before boosting toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['tag_misleading_links']}\n          id='mastodon-settings--tag_misleading_links'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.tag_misleading_links' defaultMessage='Tag misleading links' />\n          <span className='hint'><FormattedMessage id='settings.tag_misleading_links.hint' defaultMessage=\"Add a visual indication with the link target host to every link not mentioning it explicitly\" /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['rewrite_mentions']}\n          id='mastodon-settings--rewrite_mentions'\n          options={[\n            { value: 'no', message: intl.formatMessage(messages.rewrite_mentions_no) },\n            { value: 'acct', message: intl.formatMessage(messages.rewrite_mentions_acct) },\n            { value: 'username', message: intl.formatMessage(messages.rewrite_mentions_username) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.rewrite_mentions' defaultMessage='Rewrite mentions in displayed statuses' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.notifications_opts' defaultMessage='Notifications options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'tab_badge']}\n            id='mastodon-settings--notifications-tab_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.tab_badge' defaultMessage=\"Unread notifications badge\" />\n            <span className='hint'><FormattedMessage id='settings.notifications.tab_badge.hint' defaultMessage=\"Display a badge for unread notifications in the column icons when the notifications column isn't open\" /></span>\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'favicon_badge']}\n            id='mastodon-settings--notifications-favicon_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.favicon_badge' defaultMessage='Unread notifications favicon badge' />\n            <span className='hint'><FormattedMessage id='settings.notifications.favicon_badge.hint' defaultMessage=\"Add a badge for unread notifications to the favicon\" /></span>\n          </LocalSettingsPageItem>\n        </section>\n\n        <section>\n          <h2><FormattedMessage id='settings.status_icons' defaultMessage='Toot icons' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'language']}\n            id='mastodon-settings--status-icons-language'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_language' defaultMessage='Language indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'reply']}\n            id='mastodon-settings--status-icons-reply'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_reply' defaultMessage='Reply indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'local_only']}\n            id='mastodon-settings--status-icons-local_only'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_local_only' defaultMessage='Local-only indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'media']}\n            id='mastodon-settings--status-icons-media'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_media' defaultMessage='Media and poll indicators' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'visibility']}\n            id='mastodon-settings--status-icons-visibility'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_visibility' defaultMessage='Toot privacy indicator' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.layout_opts' defaultMessage='Layout options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['layout']}\n            id='mastodon-settings--layout'\n            options={[\n              { value: 'auto', message: intl.formatMessage(messages.layout_auto), hint: intl.formatMessage(messages.layout_auto_hint) },\n              { value: 'multiple', message: intl.formatMessage(messages.layout_desktop), hint: intl.formatMessage(messages.layout_desktop_hint) },\n              { value: 'single', message: intl.formatMessage(messages.layout_mobile), hint: intl.formatMessage(messages.layout_mobile_hint) },\n            ]}\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.layout' defaultMessage='Layout:' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['stretch']}\n            id='mastodon-settings--stretch'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.wide_view' defaultMessage='Wide view (Desktop mode only)' />\n            <span className='hint'><FormattedMessage id='settings.wide_view_hint' defaultMessage='Stretches columns to better fill the available space.' /></span>\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['navbar_under']}\n            id='mastodon-settings--navbar_under'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.navbar_under' defaultMessage='Navbar at the bottom (Mobile only)' />\n          </LocalSettingsPageItem>\n          <DeprecatedLocalSettingsPageItem\n            id='mastodon-settings--swipe_to_change_columns'\n            value={!disableSwiping}\n          >\n            <FormattedMessage id='settings.swipe_to_change_columns' defaultMessage='Allow swiping to change columns (Mobile only)' />\n            <span className='hint'>\n              <FormattedMessage\n                id='settings.deprecated_setting'\n                defaultMessage=\"This setting is now controlled from Mastodon's {settings_page_link}\"\n                values={{\n                  settings_page_link: (\n                    <a href={preferenceLink('user_setting_disable_swiping')}>\n                      <FormattedMessage\n                        id='settings.shared_settings_link'\n                        defaultMessage='user preferences'\n                      />\n                    </a>\n                  )\n                }}\n              />\n            </span>\n          </DeprecatedLocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page compose_box_opts'>\n        <h1><FormattedMessage id='settings.compose_box_opts' defaultMessage='Compose box' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['always_show_spoilers_field']}\n          id='mastodon-settings--always_show_spoilers_field'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.always_show_spoilers_field' defaultMessage='Always enable the Content Warning field' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['prepend_cw_re']}\n          id='mastodon-settings--prepend_cw_re'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.prepend_cw_re' defaultMessage='Prepend “re: ” to content warnings when replying' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['preselect_on_reply']}\n          id='mastodon-settings--preselect_on_reply'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.preselect_on_reply' defaultMessage='Pre-select usernames on reply' />\n          <span className='hint'><FormattedMessage id='settings.preselect_on_reply_hint' defaultMessage='When replying to a conversation with multiple participants, pre-select usernames past the first' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_missing_media_description']}\n          id='mastodon-settings--confirm_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_missing_media_description' defaultMessage='Show confirmation dialog before sending toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_before_clearing_draft']}\n          id='mastodon-settings--confirm_before_clearing_draft'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_before_clearing_draft' defaultMessage='Show confirmation dialog before overwriting the message being composed' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_content_type_choice']}\n          id='mastodon-settings--show_content_type_choice'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_content_type_choice' defaultMessage='Show content-type choice when authoring toots' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm']}\n          id='mastodon-settings--side_arm'\n          options={[\n            { value: 'none', message: intl.formatMessage(messages.side_arm_none) },\n            { value: 'direct', message: intl.formatMessage({ id: 'privacy.direct.short' }) },\n            { value: 'private', message: intl.formatMessage({ id: 'privacy.private.short' }) },\n            { value: 'unlisted', message: intl.formatMessage({ id: 'privacy.unlisted.short' }) },\n            { value: 'public', message: intl.formatMessage({ id: 'privacy.public.short' }) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm' defaultMessage='Secondary toot button:' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm_reply_mode']}\n          id='mastodon-settings--side_arm_reply_mode'\n          options={[\n            { value: 'keep', message: intl.formatMessage(messages.side_arm_keep) },\n            { value: 'copy', message: intl.formatMessage(messages.side_arm_copy) },\n            { value: 'restrict', message: intl.formatMessage(messages.side_arm_restrict) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm_reply_mode' defaultMessage='When replying to a toot:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page content_warnings'>\n        <h1><FormattedMessage id='settings.content_warnings' defaultMessage='Content warnings' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'shared_state']}\n          id='mastodon-settings--content_warnings-shared_state'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_shared_state' defaultMessage='Show/hide content of all copies at once' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_shared_state_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning button affect all copies of a post at once. This will prevent automatic collapsing of any copy of a toot with unfolded CW' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'media_outside']}\n          id='mastodon-settings--content_warnings-media_outside'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_media_outside' defaultMessage='Display media attachments outside content warnings' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_media_outside_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning toggle not affect media attachments' /></span>\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.content_warnings_unfold_opts' defaultMessage='Auto-unfolding options' /></h2>\n          <DeprecatedLocalSettingsPageItem\n            id='mastodon-settings--content_warnings-auto_unfold'\n            value={expandSpoilers}\n          >\n            <FormattedMessage id='settings.enable_content_warnings_auto_unfold' defaultMessage='Automatically unfold content-warnings' />\n            <span className='hint'>\n              <FormattedMessage\n                id='settings.deprecated_setting'\n                defaultMessage=\"This setting is now controlled from Mastodon's {settings_page_link}\"\n                values={{\n                  settings_page_link: (\n                    <a href={preferenceLink('user_setting_expand_spoilers')}>\n                      <FormattedMessage\n                        id='settings.shared_settings_link'\n                        defaultMessage='user preferences'\n                      />\n                    </a>\n                  )\n                }}\n              />\n            </span>\n          </DeprecatedLocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['content_warnings', 'filter']}\n            id='mastodon-settings--content_warnings-auto_unfold'\n            onChange={onChange}\n            placeholder={intl.formatMessage(messages.regexp)}\n            disabled={!expandSpoilers}\n          >\n            <FormattedMessage id='settings.content_warnings_filter' defaultMessage='Content warnings to not automatically unfold:' />\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page filters'>\n        <h1><FormattedMessage id='settings.filters' defaultMessage='Filters' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['filtering_behavior']}\n          id='mastodon-settings--filters-behavior'\n          onChange={onChange}\n          options={[\n            { value: 'drop', message: intl.formatMessage(messages.filters_drop) },\n            { value: 'upstream', message: intl.formatMessage(messages.filters_upstream) },\n            { value: 'hide', message: intl.formatMessage(messages.filters_hide) },\n            { value: 'content_warning', message: intl.formatMessage(messages.filters_cw) }\n          ]}\n        >\n          <FormattedMessage id='settings.filtering_behavior' defaultMessage='Filtering behavior' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n    ({ onChange, settings }) => (\n      <div className='glitch local-settings__page collapsed'>\n        <h1><FormattedMessage id='settings.collapsed_statuses' defaultMessage='Collapsed toots' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'enabled']}\n          id='mastodon-settings--collapsed-enabled'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.enable_collapsed' defaultMessage='Enable collapsed toots' />\n          <span className='hint'><FormattedMessage id='settings.enable_collapsed_hint' defaultMessage='Collapsed posts have parts of their contents hidden to take up less screen space. This is distinct from the Content Warning feature' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'show_action_bar']}\n          id='mastodon-settings--collapsed-show-action-bar'\n          onChange={onChange}\n          dependsOn={[['collapsed', 'enabled']]}\n        >\n          <FormattedMessage id='settings.show_action_bar' defaultMessage='Show action buttons in collapsed toots' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.auto_collapse' defaultMessage='Automatic collapsing' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'all']}\n            id='mastodon-settings--collapsed-auto-all'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_all' defaultMessage='Everything' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'notifications']}\n            id='mastodon-settings--collapsed-auto-notifications'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_notifications' defaultMessage='Notifications' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'lengthy']}\n            id='mastodon-settings--collapsed-auto-lengthy'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_lengthy' defaultMessage='Lengthy toots' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'reblogs']}\n            id='mastodon-settings--collapsed-auto-reblogs'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_reblogs' defaultMessage='Boosts' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'replies']}\n            id='mastodon-settings--collapsed-auto-replies'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_replies' defaultMessage='Replies' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'media']}\n            id='mastodon-settings--collapsed-auto-media'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_media' defaultMessage='Toots with media' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.image_backgrounds' defaultMessage='Image backgrounds' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'user_backgrounds']}\n            id='mastodon-settings--collapsed-user-backgrouns'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_users' defaultMessage='Give collapsed toots an image background' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'preview_images']}\n            id='mastodon-settings--collapsed-preview-images'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_media' defaultMessage='Preview collapsed toot media' />\n            <span className='hint'><FormattedMessage id='settings.image_backgrounds_media_hint' defaultMessage='If the post has any media attachment, use the first one as a background' /></span>\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page media'>\n        <h1><FormattedMessage id='settings.media' defaultMessage='Media' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'letterbox']}\n          id='mastodon-settings--media-letterbox'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_letterbox' defaultMessage='Letterbox media' />\n          <span className='hint'><FormattedMessage id='settings.media_letterbox_hint' defaultMessage='Scale down and letterbox media to fill the image containers instead of stretching and cropping them' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'fullwidth']}\n          id='mastodon-settings--media-fullwidth'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_fullwidth' defaultMessage='Full-width media previews' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['inline_preview_cards']}\n          id='mastodon-settings--inline-preview-cards'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.inline_preview_cards' defaultMessage='Inline preview cards for external links' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'reveal_behind_cw']}\n          id='mastodon-settings--reveal-behind-cw'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_reveal_behind_cw' defaultMessage='Reveal sensitive media behind a CW by default' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_player']}\n          id='mastodon-settings--pop-in-player'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.pop_in_player' defaultMessage='Enable pop-in player' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_position']}\n          id='mastodon-settings--pop-in-position'\n          options={[\n            { value: 'left', message: intl.formatMessage(messages.pop_in_left) },\n            { value: 'right', message: intl.formatMessage(messages.pop_in_right) },\n          ]}\n          onChange={onChange}\n          dependsOn={[['media', 'pop_in_player']]}\n        >\n          <FormattedMessage id='settings.pop_in_position' defaultMessage='Pop-in player position:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n  ];\n\n  render () {\n    const { pages } = this;\n    const { index, intl, onChange, settings } = this.props;\n    const CurrentPage = pages[index] || pages[0];\n\n    return <CurrentPage intl={intl} onChange={onChange} settings={settings} />;\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Icon from 'flavours/glitch/components/icon';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPage extends React.PureComponent {\n\n  static propTypes = {\n    active: PropTypes.bool,\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    textIcon: PropTypes.string,\n    index: PropTypes.number.isRequired,\n    onNavigate: PropTypes.func,\n    title: PropTypes.string,\n  };\n\n  handleClick = (e) => {\n    const { index, onNavigate } = this.props;\n    if (onNavigate) {\n      onNavigate(index);\n      e.preventDefault();\n    }\n  }\n\n  render () {\n    const { handleClick } = this;\n    const {\n      active,\n      className,\n      href,\n      icon,\n      textIcon,\n      onNavigate,\n      title,\n    } = this.props;\n\n    const finalClassName = classNames('glitch', 'local-settings__navigation__item', {\n      active,\n    }, className);\n\n    const iconElem = icon ? <Icon fixedWidth id={icon} /> : (textIcon ? <span className='text-icon-button'>{textIcon}</span> : null);\n\n    if (href) return (\n      <a\n        href={href}\n        className={finalClassName}\n      >\n        {iconElem} <span>{title}</span>\n      </a>\n    );\n    else if (onNavigate) return (\n      <a\n        onClick={handleClick}\n        role='button'\n        tabIndex='0'\n        className={finalClassName}\n      >\n        {iconElem} <span>{title}</span>\n      </a>\n    );\n    else return null;\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\n\n//  Our imports\nimport LocalSettingsNavigationItem from './item';\nimport { preferencesLink } from 'flavours/glitch/util/backend_links';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nconst messages = defineMessages({\n  general: {  id: 'settings.general', defaultMessage: 'General' },\n  compose: {  id: 'settings.compose_box_opts', defaultMessage: 'Compose box' },\n  content_warnings: { id: 'settings.content_warnings', defaultMessage: 'Content Warnings' },\n  filters: { id: 'settings.filters', defaultMessage: 'Filters' },\n  collapsed: { id: 'settings.collapsed_statuses', defaultMessage: 'Collapsed toots' },\n  media: { id: 'settings.media', defaultMessage: 'Media' },\n  preferences: { id: 'settings.preferences', defaultMessage: 'Preferences' },\n  close: { id: 'settings.close', defaultMessage: 'Close' },\n});\n\nexport default @injectIntl\nclass LocalSettingsNavigation extends React.PureComponent {\n\n  static propTypes = {\n    index      : PropTypes.number,\n    intl       : PropTypes.object.isRequired,\n    onClose    : PropTypes.func.isRequired,\n    onNavigate : PropTypes.func.isRequired,\n  };\n\n  render () {\n\n    const { index, intl, onClose, onNavigate } = this.props;\n\n    return (\n      <nav className='glitch local-settings__navigation'>\n        <LocalSettingsNavigationItem\n          active={index === 0}\n          index={0}\n          onNavigate={onNavigate}\n          icon='cogs'\n          title={intl.formatMessage(messages.general)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 1}\n          index={1}\n          onNavigate={onNavigate}\n          icon='pencil'\n          title={intl.formatMessage(messages.compose)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 2}\n          index={2}\n          onNavigate={onNavigate}\n          textIcon='CW'\n          title={intl.formatMessage(messages.content_warnings)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 3}\n          index={3}\n          onNavigate={onNavigate}\n          icon='filter'\n          title={intl.formatMessage(messages.filters)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 4}\n          index={4}\n          onNavigate={onNavigate}\n          icon='angle-double-up'\n          title={intl.formatMessage(messages.collapsed)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 5}\n          index={5}\n          onNavigate={onNavigate}\n          icon='image'\n          title={intl.formatMessage(messages.media)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 6}\n          href={ preferencesLink }\n          index={6}\n          icon='cog'\n          title={intl.formatMessage(messages.preferences)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 7}\n          className='close'\n          index={7}\n          onNavigate={onClose}\n          icon='times'\n          title={intl.formatMessage(messages.close)}\n        />\n      </nav>\n    );\n  }\n\n}\n","//  Package imports.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\n//  Our imports\nimport LocalSettingsPage from './page';\nimport LocalSettingsNavigation from './navigation';\nimport { closeModal } from 'flavours/glitch/actions/modal';\nimport { changeLocalSetting } from 'flavours/glitch/actions/local_settings';\n\nconst mapStateToProps = state => ({\n  settings: state.get('local_settings'),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange (setting, value) {\n    dispatch(changeLocalSetting(setting, value));\n  },\n  onClose () {\n    dispatch(closeModal());\n  },\n});\n\nclass LocalSettings extends React.PureComponent {\n\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    settings: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    currentIndex: 0,\n  };\n\n  navigateTo = (index) =>\n    this.setState({ currentIndex: +index });\n\n  render () {\n\n    const { navigateTo } = this;\n    const { onChange, onClose, settings } = this.props;\n    const { currentIndex } = this.state;\n\n    return (\n      <div className='glitch modal-root__modal local-settings'>\n        <LocalSettingsNavigation\n          index={currentIndex}\n          onClose={onClose}\n          onNavigate={navigateTo}\n        />\n        <LocalSettingsPage\n          index={currentIndex}\n          onChange={onChange}\n          settings={settings}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalSettings);\n"],"sourceRoot":""}