{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/list_timeline/index.js"],"names":["messages","defineMessages","deleteMessage","deleteConfirm","followed","none","list","ListTimeline","connect","state","props","getIn","params","id","hasUnread","injectIntl","React","PureComponent","handlePin","columnId","dispatch","this","removeColumn","addColumn","context","router","history","push","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","expandListTimeline","handleEditClick","openModal","listId","handleDeleteClick","intl","message","formatMessage","confirm","onConfirm","deleteList","handleRepliesPolicyChange","target","updateList","undefined","value","componentDidMount","fetchList","disconnect","connectListStream","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","pinned","title","get","replies_policy","className","ref","label","icon","active","onPin","onMove","onClick","bindToDocument","tabIndex","defaultMessage","role","aria-labelledby","map","policy","name","checked","onChange","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","contextTypes","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/list_timeline-75571c9f5273db2242a4.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connectListStream } from 'flavours/glitch/actions/streaming';\nimport { expandListTimeline } from 'flavours/glitch/actions/timelines';\nimport { fetchList, deleteList, updateList } from 'flavours/glitch/actions/lists';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport Icon from 'flavours/glitch/components/icon';\nimport RadioButton from 'flavours/glitch/components/radio_button';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.context.router.history.push('/');\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  }\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  }\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n\n        if (!!columnId) {\n          dispatch(removeColumn(columnId));\n        } else {\n          this.context.router.history.push('/lists');\n        }\n      },\n    }));\n  }\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch, list } = this.props;\n    const { id } = this.props.params;\n    this.props.dispatch(updateList(id, undefined, false, target.value));\n  }\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <MissingIndicator />\n          </div>\n        </Column>\n      );\n    }\n\n    return (\n      <Column ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          bindToDocument={!multiColumn}\n        >\n          <div className='column-settings__row column-header__links'>\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n          </div>\n\n          { replies_policy !== undefined && (\n            <div role='group' aria-labelledby={`list-${id}-replies-policy`}>\n              <span id={`list-${id}-replies-policy`} className='column-settings__section'>\n                <FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' />\n              </span>\n              <div className='column-settings__row'>\n                { ['none', 'list', 'followed'].map(policy => (\n                  <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          <hr />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet.' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}