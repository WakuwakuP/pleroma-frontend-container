{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/components/column_settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/containers/column_settings_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/components/conversation.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/containers/conversation_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/components/conversations_list.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/containers/conversations_list_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/direct_timeline/index.js"],"names":["messages","defineMessages","filter_regex","settings","ColumnSettings","injectIntl","React","PureComponent","render","onChange","intl","this","props","className","id","defaultMessage","settingPath","label","formatMessage","connect","state","getIn","dispatch","path","checked","changeSetting","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","ImmutablePureComponent","isExpanded","undefined","parseClick","e","destination","router","context","lastStatus","unread","markRead","button","ctrlKey","altKey","metaKey","get","history","location","mastodonBackSteps","push","preventDefault","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","handleClick","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","setExpansion","value","setState","accounts","scrollKey","menu","text","action","names","map","a","to","href","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","media","size","compact","classNames","tabIndex","onClick","role","timestamp","onMouseEnter","onMouseLeave","values","status","expanded","onExpandedToggle","collapsable","icon","items","direction","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","replyConfirm","replyMessage","getStatus","makeGetStatus","conversation","find","x","lastStatusId","accountId","markConversationRead","_","getState","trim","openModal","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","last","onLoadMore","leading","index","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","other","ref","item","hasMore","isLoading","maxId","expandConversations","DirectTimeline","hasUnread","conversationsMode","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMoreTimeline","expandDirectTimeline","handleLoadMoreConversations","componentDidMount","mountConversations","disconnect","connectDirectStream","componentDidUpdate","prevProps","componentWillUnmount","unmountConversations","multiColumn","pinned","contents","trackScroll","timelineId","handleLoadMore","prepend","target","emptyMessage","bindToDocument","active","onPin","onMove"],"mappings":"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","file":"js/flavours/glitch/async/direct_timeline-ccd0b96b32c2ba26d4aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\nimport SettingText from '../../../components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['conversations']} onChange={onChange} label={<FormattedMessage id='direct.group_by_conversations' defaultMessage='Group by conversation' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'direct']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['direct', ...path], checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport StatusContent from 'flavours/glitch/components/status_content';\nimport AttachmentList from 'flavours/glitch/components/attachment_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport DropdownMenuContainer from 'flavours/glitch/containers/dropdown_menu_container';\nimport AvatarComposite from 'flavours/glitch/components/avatar_composite';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\nimport { HotKeys } from 'react-hotkeys';\nimport { autoPlayGif } from 'flavours/glitch/util/initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nexport default @injectIntl\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    isExpanded: undefined,\n  };\n\n  parseClick = (e, destination) => {\n    const { router } = this.context;\n    const { lastStatus, unread, markRead } = this.props;\n    if (!router) return;\n\n    if (e.button === 0 && !(e.ctrlKey || e.altKey || e.metaKey)) {\n      if (destination === undefined) {\n        if (unread) {\n          markRead();\n        }\n        destination = `/statuses/${lastStatus.get('id')}`;\n      }\n      let state = {...router.history.location.state};\n      state.mastodonBackSteps = (state.mastodonBackSteps || 0) + 1;\n      router.history.push(destination, state);\n      e.preventDefault();\n    }\n  }\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  }\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  }\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  }\n\n  handleDelete = () => {\n    this.props.delete();\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  }\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  }\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n\n    if (this.props.lastStatus.get('spoiler_text')) {\n      this.setExpansion(!this.state.isExpanded);\n    }\n  };\n\n  setExpansion = value => {\n    this.setState({ isExpanded: value });\n  }\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const isExpanded = this.props.settings.getIn(['content_warnings', 'shared_state']) ? !lastStatus.get('hidden') : this.state.isExpanded;\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Permalink to={`/@${a.get('acct')}`} href={a.get('url')} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Permalink>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    let media = null;\n    if (lastStatus.get('media_attachments').size > 0) {\n      media = <AttachmentList compact media={lastStatus.get('media_attachments')} />;\n    }\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex='0'>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              parseClick={this.parseClick}\n              expanded={isExpanded}\n              onExpandedToggle={this.handleShowMore}\n              collapsable\n              media={media}\n            />\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'flavours/glitch/actions/conversations';\nimport { makeGetStatus } from 'flavours/glitch/selectors';\nimport { replyCompose } from 'flavours/glitch/actions/compose';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'flavours/glitch/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n      settings: state.get('local_settings'),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ConversationContainer from '../containers/conversation_container';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { debounce } from 'lodash';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id)\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true })\n\n  render () {\n    const { conversations, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ConversationsList from '../components/conversations_list';\nimport { expandConversations } from 'flavours/glitch/actions/conversations';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { expandDirectTimeline } from 'flavours/glitch/actions/timelines';\nimport { mountConversations, unmountConversations, expandConversations } from 'flavours/glitch/actions/conversations';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectDirectStream } from 'flavours/glitch/actions/streaming';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'direct', 'unread']) > 0,\n  conversationsMode: state.getIn(['settings', 'direct', 'conversations']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    conversationsMode: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, conversationsMode } = this.props;\n\n    dispatch(mountConversations());\n\n    if (conversationsMode) {\n      dispatch(expandConversations());\n    } else {\n      dispatch(expandDirectTimeline());\n    }\n\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dispatch, conversationsMode } = this.props;\n\n    if (prevProps.conversationsMode && !conversationsMode) {\n      dispatch(expandDirectTimeline());\n    } else if (!prevProps.conversationsMode && conversationsMode) {\n      dispatch(expandConversations());\n    }\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMoreTimeline = maxId => {\n    this.props.dispatch(expandDirectTimeline({ maxId }));\n  }\n\n  handleLoadMoreConversations = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, conversationsMode } = this.props;\n    const pinned = !!columnId;\n\n    let contents;\n    if (conversationsMode) {\n      contents = (\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    } else {\n      contents = (\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMoreTimeline}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {contents}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}