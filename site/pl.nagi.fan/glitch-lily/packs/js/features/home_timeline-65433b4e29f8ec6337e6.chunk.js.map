{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/home_timeline/components/column_settings.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/home_timeline/containers/column_settings_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/getting_started/components/announcements.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/getting_started/containers/announcements_container.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/home_timeline/index.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/components/icon_with_badge.js"],"names":["ColumnSettings","injectIntl","React","PureComponent","render","settings","onChange","this","props","className","id","defaultMessage","prefix","settingPath","label","connect","state","getIn","dispatch","key","checked","changeSetting","onSave","saveSettings","messages","defineMessages","close","previous","next","Content","ImmutablePureComponent","setRef","c","node","onMentionClick","mention","e","context","router","button","ctrlKey","metaKey","preventDefault","history","push","get","onHashtagClick","hashtag","replace","onStatusClick","status","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","componentDidMount","_updateLinks","componentDidUpdate","links","link","classList","contains","add","announcement","find","item","href","addEventListener","bind","setAttribute","textContent","previousSibling","text","ref","dangerouslySetInnerHTML","__html","onMouseEnter","onMouseLeave","contextTypes","PropTypes","object","propTypes","ImmutablePropTypes","map","isRequired","Emoji","emojiMap","hovered","unicodeMapping","filename","shortCode","title","draggable","alt","assetHost","Reaction","handleClick","reaction","announcementId","addReaction","removeReaction","setState","classNames","active","onClick","style","value","string","func","ReactionsBar","handleEmojiPick","data","native","willEnter","scale","reduceMotion","willLeave","spring","stiffness","damping","reactions","visibleReactions","filter","x","styles","toArray","items","isEmpty","transform","position","size","onPickEmoji","list","Announcement","unread","selected","startsAt","Date","endsAt","now","hasTimeRange","skipYear","getFullYear","skipEndDate","getDate","getMonth","skipTime","hour12","year","undefined","month","day","hour","minute","intl","bool","Announcements","index","handleChangeIndex","announcements","handleNextClick","handlePrevClick","_markAnnouncementAsRead","dismissAnnouncement","mascot","elephantUIPlane","animateHeight","adjustHeight","onChangeIndex","idx","disabled","disableSwiping","reverse","formatMessage","icon","customEmojiMap","createSelector","reduce","set","ImmutableMap","name","show_announcements","hide_announcements","HomeTimeline","hasUnread","isPartial","hasAnnouncements","unreadAnnouncements","count","showAnnouncements","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","handleLoadMore","maxId","expandHomeTimeline","handleToggleAnnouncementsClick","stopPropagation","toggleShowAnnouncements","setTimeout","fetchAnnouncements","_checkIfReloadNeeded","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","multiColumn","pinned","announcementsButton","aria-label","aria-pressed","bindToDocument","onPin","onMove","extraButton","appendContent","trackScroll","scrollKey","onLoadMore","timelineId","emptyMessage","values","suggestions","Link","to","IconWithBadge","issueBadge","fixedWidth","num"],"mappings":"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","file":"js/features/home_timeline-65433b4e29f8ec6337e6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show boosts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting, saveSettings } from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'home']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (key, checked) {\n    dispatch(changeSetting(['home', ...key], checked));\n  },\n\n  onSave () {\n    dispatch(saveSettings());\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport IconButton from 'mastodon/components/icon_button';\nimport Icon from 'mastodon/components/icon';\nimport { defineMessages, injectIntl, FormattedMessage, FormattedDate } from 'react-intl';\nimport { autoPlayGif, reduceMotion, disableSwiping } from 'mastodon/initial_state';\nimport elephantUIPlane from 'mastodon/../images/elephant_ui_plane.svg';\nimport { mascot } from 'mastodon/initial_state';\nimport unicodeMapping from 'mastodon/features/emoji/emoji_unicode_mapping_light';\nimport classNames from 'classnames';\nimport EmojiPickerDropdown from 'mastodon/features/compose/containers/emoji_picker_dropdown_container';\nimport AnimatedNumber from 'mastodon/components/animated_number';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring';\nimport { assetHost } from 'mastodon/utils/config';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nclass Content extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n  };\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidMount () {\n    this._updateLinks();\n  }\n\n  componentDidUpdate () {\n    this._updateLinks();\n  }\n\n  _updateLinks () {\n    const node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    const links = node.querySelectorAll('a');\n\n    for (var i = 0; i < links.length; ++i) {\n      let link = links[i];\n\n      if (link.classList.contains('status-link')) {\n        continue;\n      }\n\n      link.classList.add('status-link');\n\n      let mention = this.props.announcement.get('mentions').find(item => link.href === item.get('url'));\n\n      if (mention) {\n        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);\n        link.setAttribute('title', mention.get('acct'));\n      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {\n        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);\n      } else {\n        let status = this.props.announcement.get('statuses').find(item => link.href === item.get('url'));\n        if (status) {\n          link.addEventListener('click', this.onStatusClick.bind(this, status), false);\n        }\n        link.setAttribute('title', link.href);\n        link.classList.add('unhandled-link');\n      }\n\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  }\n\n  onMentionClick = (mention, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${mention.get('acct')}`);\n    }\n  }\n\n  onHashtagClick = (hashtag, e) => {\n    hashtag = hashtag.replace(/^#/, '');\n\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/tags/${hashtag}`);\n    }\n  }\n\n  onStatusClick = (status, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${status.getIn(['account', 'acct'])}/${status.get('id')}`);\n    }\n  }\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n\n    return (\n      <div\n        className='announcements__item__content translate'\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: announcement.get('contentHtml') }}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      />\n    );\n  }\n\n}\n\nclass Emoji extends React.PureComponent {\n\n  static propTypes = {\n    emoji: PropTypes.string.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    hovered: PropTypes.bool.isRequired,\n  };\n\n  render () {\n    const { emoji, emojiMap, hovered } = this.props;\n\n    if (unicodeMapping[emoji]) {\n      const { filename, shortCode } = unicodeMapping[this.props.emoji];\n      const title = shortCode ? `:${shortCode}:` : '';\n\n      return (\n        <img\n          draggable='false'\n          className='emojione'\n          alt={emoji}\n          title={title}\n          src={`${assetHost}/emoji/${filename}.svg`}\n        />\n      );\n    } else if (emojiMap.get(emoji)) {\n      const filename  = (autoPlayGif || hovered) ? emojiMap.getIn([emoji, 'url']) : emojiMap.getIn([emoji, 'static_url']);\n      const shortCode = `:${emoji}:`;\n\n      return (\n        <img\n          draggable='false'\n          className='emojione custom-emoji'\n          alt={shortCode}\n          title={shortCode}\n          src={filename}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass Reaction extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reaction: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    style: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleClick = () => {\n    const { reaction, announcementId, addReaction, removeReaction } = this.props;\n\n    if (reaction.get('me')) {\n      removeReaction(announcementId, reaction.get('name'));\n    } else {\n      addReaction(announcementId, reaction.get('name'));\n    }\n  }\n\n  handleMouseEnter = () => this.setState({ hovered: true })\n\n  handleMouseLeave = () => this.setState({ hovered: false })\n\n  render () {\n    const { reaction } = this.props;\n\n    let shortCode = reaction.get('name');\n\n    if (unicodeMapping[shortCode]) {\n      shortCode = unicodeMapping[shortCode].shortCode;\n    }\n\n    return (\n      <button className={classNames('reactions-bar__item', { active: reaction.get('me') })} onClick={this.handleClick} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} title={`:${shortCode}:`} style={this.props.style}>\n        <span className='reactions-bar__item__emoji'><Emoji hovered={this.state.hovered} emoji={reaction.get('name')} emojiMap={this.props.emojiMap} /></span>\n        <span className='reactions-bar__item__count'><AnimatedNumber value={reaction.get('count')} /></span>\n      </button>\n    );\n  }\n\n}\n\nclass ReactionsBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reactions: ImmutablePropTypes.list.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleEmojiPick = data => {\n    const { addReaction, announcementId } = this.props;\n    addReaction(announcementId, data.native.replace(/:/g, ''));\n  }\n\n  willEnter () {\n    return { scale: reduceMotion ? 1 : 0 };\n  }\n\n  willLeave () {\n    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };\n  }\n\n  render () {\n    const { reactions } = this.props;\n    const visibleReactions = reactions.filter(x => x.get('count') > 0);\n\n    const styles = visibleReactions.map(reaction => ({\n      key: reaction.get('name'),\n      data: reaction,\n      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },\n    })).toArray();\n\n    return (\n      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>\n        {items => (\n          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>\n            {items.map(({ key, data, style }) => (\n              <Reaction\n                key={key}\n                reaction={data}\n                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}\n                announcementId={this.props.announcementId}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                emojiMap={this.props.emojiMap}\n              />\n            ))}\n\n            {visibleReactions.size < 8 && <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={<Icon id='plus' />} />}\n          </div>\n        )}\n      </TransitionMotion>\n    );\n  }\n\n}\n\nclass Announcement extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    selected: PropTypes.bool,\n  };\n\n  state = {\n    unread: !this.props.announcement.get('read'),\n  };\n\n  componentDidUpdate () {\n    const { selected, announcement } = this.props;\n    if (!selected && this.state.unread !== !announcement.get('read')) {\n      this.setState({ unread: !announcement.get('read') });\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n    const { unread } = this.state;\n    const startsAt = announcement.get('starts_at') && new Date(announcement.get('starts_at'));\n    const endsAt = announcement.get('ends_at') && new Date(announcement.get('ends_at'));\n    const now = new Date();\n    const hasTimeRange = startsAt && endsAt;\n    const skipYear = hasTimeRange && startsAt.getFullYear() === endsAt.getFullYear() && endsAt.getFullYear() === now.getFullYear();\n    const skipEndDate = hasTimeRange && startsAt.getDate() === endsAt.getDate() && startsAt.getMonth() === endsAt.getMonth() && startsAt.getFullYear() === endsAt.getFullYear();\n    const skipTime = announcement.get('all_day');\n\n    return (\n      <div className='announcements__item'>\n        <strong className='announcements__item__range'>\n          <FormattedMessage id='announcement.announcement' defaultMessage='Announcement' />\n          {hasTimeRange && <span> · <FormattedDate value={startsAt} hour12={false} year={(skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month='short' day='2-digit' hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /> - <FormattedDate value={endsAt} hour12={false} year={(skipYear || endsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month={skipEndDate ? undefined : 'short'} day={skipEndDate ? undefined : '2-digit'} hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /></span>}\n        </strong>\n\n        <Content announcement={announcement} />\n\n        <ReactionsBar\n          reactions={announcement.get('reactions')}\n          announcementId={announcement.get('id')}\n          addReaction={this.props.addReaction}\n          removeReaction={this.props.removeReaction}\n          emojiMap={this.props.emojiMap}\n        />\n\n        {unread && <span className='announcements__item__unread' />}\n      </div>\n    );\n  }\n\n}\n\nexport default @injectIntl\nclass Announcements extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcements: ImmutablePropTypes.list,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    dismissAnnouncement: PropTypes.func.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.announcements.size > 0 && state.index >= props.announcements.size) {\n      return { index: props.announcements.size - 1 };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount () {\n    this._markAnnouncementAsRead();\n  }\n\n  componentDidUpdate () {\n    this._markAnnouncementAsRead();\n  }\n\n  _markAnnouncementAsRead () {\n    const { dismissAnnouncement, announcements } = this.props;\n    const { index } = this.state;\n    const announcement = announcements.get(announcements.size - 1 - index);\n    if (!announcement.get('read')) dismissAnnouncement(announcement.get('id'));\n  }\n\n  handleChangeIndex = index => {\n    this.setState({ index: index % this.props.announcements.size });\n  }\n\n  handleNextClick = () => {\n    this.setState({ index: (this.state.index + 1) % this.props.announcements.size });\n  }\n\n  handlePrevClick = () => {\n    this.setState({ index: (this.props.announcements.size + this.state.index - 1) % this.props.announcements.size });\n  }\n\n  render () {\n    const { announcements, intl } = this.props;\n    const { index } = this.state;\n\n    if (announcements.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='announcements'>\n        <img className='announcements__mastodon' alt='' draggable='false' src={mascot || elephantUIPlane} />\n\n        <div className='announcements__container'>\n          <ReactSwipeableViews animateHeight={!reduceMotion} adjustHeight={reduceMotion} index={index} onChangeIndex={this.handleChangeIndex}>\n            {announcements.map((announcement, idx) => (\n              <Announcement\n                key={announcement.get('id')}\n                announcement={announcement}\n                emojiMap={this.props.emojiMap}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                intl={intl}\n                selected={index === idx}\n                disabled={disableSwiping}\n              />\n            )).reverse()}\n          </ReactSwipeableViews>\n\n          {announcements.size > 1 && (\n            <div className='announcements__pagination'>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.previous)} icon='chevron-left' onClick={this.handlePrevClick} size={13} />\n              <span>{index + 1} / {announcements.size}</span>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.next)} icon='chevron-right' onClick={this.handleNextClick} size={13} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { addReaction, removeReaction, dismissAnnouncement } from 'mastodon/actions/announcements';\nimport Announcements from '../components/announcements';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\n\nconst customEmojiMap = createSelector([state => state.get('custom_emojis')], items => items.reduce((map, emoji) => map.set(emoji.get('shortcode'), emoji), ImmutableMap()));\n\nconst mapStateToProps = state => ({\n  announcements: state.getIn(['announcements', 'items']),\n  emojiMap: customEmojiMap(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dismissAnnouncement: id => dispatch(dismissAnnouncement(id)),\n  addReaction: (id, name) => dispatch(addReaction(id, name)),\n  removeReaction: (id, name) => dispatch(removeReaction(id, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Announcements);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'mastodon/components/icon_with_badge';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  }\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n\n    let announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-pressed={showAnnouncements ? 'true' : 'false'}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`home_timeline-${columnId}`}\n          onLoadMore={this.handleLoadMore}\n          timelineId='home'\n          emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up. {suggestions}' values={{ suggestions: <Link to='/start'><FormattedMessage id='empty_column.home.suggestions' defaultMessage='See some suggestions' /></Link> }} />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from 'mastodon/components/icon';\n\nconst formatNumber = num => num > 40 ? '40+' : num;\n\nconst IconWithBadge = ({ id, count, issueBadge, className }) => (\n  <i className='icon-with-badge'>\n    <Icon id={id} fixedWidth className={className} />\n    {count > 0 && <i className='icon-with-badge__badge'>{formatNumber(count)}</i>}\n    {issueBadge && <i className='icon-with-badge__issue-badge' />}\n  </i>\n);\n\nIconWithBadge.propTypes = {\n  id: PropTypes.string.isRequired,\n  count: PropTypes.number.isRequired,\n  issueBadge: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nexport default IconWithBadge;\n"],"sourceRoot":""}