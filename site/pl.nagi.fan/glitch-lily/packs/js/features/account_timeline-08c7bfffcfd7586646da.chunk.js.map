{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/mastodon/features/account_timeline/index.js"],"names":["emptyList","ImmutableList","RemoteHint","url","resource","id","defaultMessage","AccountTimeline","connect","state","params","acct","withReplies","accountId","getIn","isLoading","path","remote","remoteUrl","isAccount","statusIds","featuredStatusIds","hasMore","suspended","hidden","getAccountHidden","blockedBy","ImmutablePureComponent","handleLoadMore","maxId","this","props","dispatch","expandAccountTimeline","_load","fetchAccount","expandAccountFeaturedTimeline","me","connectTimeline","componentDidMount","lookupAccount","componentDidUpdate","prevProps","disconnectTimeline","componentWillUnmount","render","multiColumn","emptyMessage","forceEmptyState","isEmpty","remoteMessage","prepend","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"8UAqBA,MAAMA,EAAYC,iBA4BZC,EAAa,QAAC,IAAEC,GAAH,SACjB,YAAC,IAAD,CAAcA,IAAKA,EAAKC,SAAU,YAAC,IAAD,CAAkBC,GAAG,mCAAmCC,eAAe,mB,IAQrGC,EADUC,mBAlCQ,CAACC,EAAD,KAA2D,IAAjDC,QAAQ,KAAEC,EAAF,GAAQN,GAAlB,YAAwBO,GAAc,GAAY,EAChF,MAAMC,EAAYR,GAAMI,EAAMK,MAAM,CAAC,eAAgBH,IAErD,IAAKE,EACH,MAAO,CACLE,WAAW,GAIf,MAAMC,EAAOJ,EAAiBC,EAAN,gBAAiCA,EAEzD,MAAO,CACLA,YACAI,SAAWR,EAAMK,MAAM,CAAC,WAAYD,EAAW,WAAaJ,EAAMK,MAAM,CAAC,WAAYD,EAAW,cAChGK,UAAWT,EAAMK,MAAM,CAAC,WAAYD,EAAW,QAC/CM,YAAaV,EAAMK,MAAM,CAAC,WAAYD,IACtCO,UAAWX,EAAMK,MAAM,CAAC,YAAD,WAAyBE,EAAQ,SAAUhB,GAClEqB,kBAAmBT,EAAcX,iBAAkBQ,EAAMK,MAAM,CAAC,YAAD,WAAyBD,EAAzB,UAA6C,SAAUb,GACtHe,UAAWN,EAAMK,MAAM,CAAC,YAAD,WAAyBE,EAAQ,cACxDM,QAASb,EAAMK,MAAM,CAAC,YAAD,WAAyBE,EAAQ,YACtDO,UAAWd,EAAMK,MAAM,CAAC,WAAYD,EAAW,cAAc,GAC7DW,OAAQC,YAAiBhB,EAAOI,GAChCa,UAAWjB,EAAMK,MAAM,CAAC,gBAAiBD,EAAW,eAAe,M,KAYxD,cACec,IAAwB,cAAD,yBAuEnDC,eAAiBC,IACfC,KAAKC,MAAMC,SAASC,YAAsBH,KAAKC,MAAMlB,UAAW,CAAEgB,QAAOjB,YAAakB,KAAKC,MAAMnB,gBAjDnGsB,QACE,MAAM,UAAErB,EAAF,YAAaD,EAAb,SAA0BoB,GAAaF,KAAKC,MAElDC,EAASG,YAAatB,IAEjBD,GACHoB,EAASI,YAA8BvB,IAGzCmB,EAASC,YAAsBpB,EAAW,CAAED,iBAExCC,IAAcwB,KAChBL,EAASM,YAAgB,WAAWD,MAIxCE,oBACE,MAAQ7B,QAAQ,KAAEC,GAAZ,UAAoBE,EAApB,SAA+BmB,GAAaF,KAAKC,MAEnDlB,EACFiB,KAAKI,QAELF,EAASQ,YAAc7B,IAI3B8B,mBAAoBC,GAClB,MAAQhC,QAAQ,KAAEC,GAAZ,UAAoBE,EAApB,SAA+BmB,GAAaF,KAAKC,MAEnDW,EAAU7B,YAAcA,GAAaA,EACvCiB,KAAKI,QACIQ,EAAUhC,OAAOC,OAASA,GACnCqB,EAASQ,YAAc7B,IAGrB+B,EAAU7B,YAAcwB,KAAMxB,IAAcwB,KAC9CL,EAASW,YAAmB,WAAWN,MAI3CO,uBACE,MAAM,SAAEZ,EAAF,UAAYnB,GAAciB,KAAKC,MAEjClB,IAAcwB,KAChBL,EAASW,YAAmB,WAAWN,MAQ3CQ,SACE,MAAM,UAAEhC,EAAF,UAAaO,EAAb,kBAAwBC,EAAxB,UAA2CN,EAA3C,QAAsDO,EAAtD,UAA+DI,EAA/D,UAA0EH,EAA1E,UAAqFJ,EAArF,OAAgGK,EAAhG,YAAwGsB,EAAxG,OAAqH7B,EAArH,UAA6HC,GAAcY,KAAKC,MAEtJ,IAAKZ,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,CAAkB2B,YAAaA,IAC/B,YAAC,IAAD,KAKN,IAAK1B,GAAaL,EAChB,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAIgC,EAEJ,MAAMC,EAAkBzB,GAAaG,GAAaF,EAGhDuB,EADExB,EACa,YAAC,IAAD,CAAkBlB,GAAG,iCAAiCC,eAAe,sBAC3EkB,EACM,YAAC,IAAD,CAAoBX,UAAWA,IACrCa,EACM,YAAC,IAAD,CAAkBrB,GAAG,mCAAmCC,eAAe,wBAC7EW,GAAUG,EAAU6B,UACd,YAAC/C,EAAD,CAAYC,IAAKe,IAEjB,YAAC,IAAD,CAAkBb,GAAG,gCAAgCC,eAAe,mBAGrF,MAAM4C,EAAgBjC,EAAS,YAACf,EAAD,CAAYC,IAAKe,IAAgB,KAEhE,OACE,YAAC,IAAD,UACE,YAAC,IAAD,CAAkB4B,YAAaA,IAE/B,YAAC,IAAD,CACEK,QAAS,YAAC,IAAD,CAAiBtC,UAAWiB,KAAKC,MAAMlB,UAAWuC,SAAUJ,IACrEK,eAAa,EACbC,OAAQJ,EACRK,UAAU,mBACVnC,UAAW4B,EAAkBhD,EAAYoB,EACzCC,kBAAmBA,EACnBN,UAAWA,EACXO,SAAU0B,GAAmB1B,EAC7BkC,WAAY1B,KAAKF,eACjBmB,aAAcA,EACdU,gBAAiBX,EACjBY,WAAW,gBA/HZC,UAAY,CACjBjD,OAAQkD,IAAUC,MAAM,CACtBlD,KAAMiD,IAAUE,OAChBzD,GAAIuD,IAAUE,SACbC,WACHlD,UAAW+C,IAAUE,OACrB9B,SAAU4B,IAAUI,KAAKD,WACzB3C,UAAW6C,IAAmBC,KAC9B7C,kBAAmB4C,IAAmBC,KACtCnD,UAAW6C,IAAUO,KACrB7C,QAASsC,IAAUO,KACnBvD,YAAagD,IAAUO,KACvBzC,UAAWkC,IAAUO,KACrBhD,UAAWyC,IAAUO,KACrB5C,UAAWqC,IAAUO,KACrB3C,OAAQoC,IAAUO,KAClBlD,OAAQ2C,IAAUO,KAClBjD,UAAW0C,IAAUE,OACrBhB,YAAac,IAAUO,M","file":"js/features/account_timeline-08c7bfffcfd7586646da.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { lookupAccount, fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport { me } from 'mastodon/initial_state';\nimport { connectTimeline, disconnectTimeline } from 'mastodon/actions/timelines';\nimport LimitedAccountHint from './components/limited_account_hint';\nimport { getAccountHidden } from 'mastodon/selectors';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', acct]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n\n    dispatch(expandAccountTimeline(accountId, { withReplies }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n\n    if (prevProps.accountId === me && accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, accountId } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || blockedBy || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}