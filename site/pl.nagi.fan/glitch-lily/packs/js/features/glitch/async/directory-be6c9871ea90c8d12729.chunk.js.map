{"version":3,"sources":["webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/directory/components/account_card.js","webpack:///app/javascript/builds/infra/glitch-lily/app/javascript/flavours/glitch/features/directory/index.js"],"names":["messages","defineMessages","unfollow","follow","cancel_follow_request","requested","unblock","unmute","unfollowConfirm","edit_profile","AccountCard","connect","getAccount","makeGetAccount","state","id","account","dispatch","intl","onFollow","getIn","unfollowModal","openModal","message","defaultMessage","values","name","get","confirm","formatMessage","onConfirm","unfollowAccount","followAccount","onBlock","unblockAccount","onMute","unmuteAccount","injectIntl","ImmutablePureComponent","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","handleFollow","this","props","handleBlock","handleMute","handleEditProfile","window","open","render","actionBtn","me","className","classNames","text","title","onClick","disabled","href","to","alt","size","onMouseEnter","onMouseLeave","dangerouslySetInnerHTML","__html","value","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","recentlyActive","newArrivals","local","federated","Directory","accountIds","ImmutableList","isLoading","domain","React","PureComponent","order","handlePin","columnId","removeColumn","addColumn","getParams","params","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleChangeOrder","e","changeColumnParams","target","setState","handleChangeLocal","handleLoadMore","expandDirectory","componentDidMount","fetchDirectory","componentDidUpdate","prevProps","prevState","paramsOld","paramsNew","multiColumn","pinned","scrollableArea","role","label","checked","onChange","accountId","visible","bindToDocument","ref","icon","onPin","onMove","scrollKey","contextTypes","router"],"mappings":"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","file":"js/features/glitch/async/directory-be6c9871ea90c8d12729.chunk.js","sourcesContent":["import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport Button from 'flavours/glitch/components/button';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport { autoPlayGif, me, unfollowModal } from 'flavours/glitch/util/initial_state';\nimport ShortNumber from 'flavours/glitch/components/short_number';\nimport {\n  followAccount,\n  unfollowAccount,\n  unblockAccount,\n  unmuteAccount,\n} from 'flavours/glitch/actions/accounts';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  cancel_follow_request: { id: 'account.cancel_follow_request', defaultMessage: 'Cancel follow request' },\n  requested: { id: 'account.requested', defaultMessage: 'Awaiting approval. Click to cancel follow request' },\n  unblock: { id: 'account.unblock_short', defaultMessage: 'Unblock' },\n  unmute: { id: 'account.unmute_short', defaultMessage: 'Unmute' },\n  unfollowConfirm: { id: 'confirmations.unfollow.confirm', defaultMessage: 'Unfollow' },\n  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { id }) => ({\n    account: getAccount(state, id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onFollow(account) {\n    if (\n      account.getIn(['relationship', 'following']) ||\n      account.getIn(['relationship', 'requested'])\n    ) {\n      if (unfollowModal) {\n        dispatch(\n          openModal('CONFIRM', {\n            message: (\n              <FormattedMessage\n                id='confirmations.unfollow.message'\n                defaultMessage='Are you sure you want to unfollow {name}?'\n                values={{ name: <strong>@{account.get('acct')}</strong> }}\n              />\n            ),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: () => dispatch(unfollowAccount(account.get('id'))),\n          }),\n        );\n      } else {\n        dispatch(unfollowAccount(account.get('id')));\n      }\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  },\n\n  onBlock(account) {\n    if (account.getIn(['relationship', 'blocking'])) {\n      dispatch(unblockAccount(account.get('id')));\n    }\n  },\n\n  onMute(account) {\n    if (account.getIn(['relationship', 'muting'])) {\n      dispatch(unmuteAccount(account.get('id')));\n    }\n  },\n\n});\n\nexport default\n@injectIntl\n@connect(makeMapStateToProps, mapDispatchToProps)\nclass AccountCard extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onFollow: PropTypes.func.isRequired,\n    onBlock: PropTypes.func.isRequired,\n    onMute: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleFollow = () => {\n    this.props.onFollow(this.props.account);\n  };\n\n  handleBlock = () => {\n    this.props.onBlock(this.props.account);\n  };\n\n  handleMute = () => {\n    this.props.onMute(this.props.account);\n  }\n\n  handleEditProfile = () => {\n    window.open('/settings/profile', '_blank');\n  }\n\n  render() {\n    const { account, intl } = this.props;\n\n    let actionBtn;\n\n    if (me !== account.get('id')) {\n      if (!account.get('relationship')) { // Wait until the relationship is loaded\n        actionBtn = '';\n      } else if (account.getIn(['relationship', 'requested'])) {\n        actionBtn = <Button className={classNames('logo-button')} text={intl.formatMessage(messages.cancel_follow_request)} title={intl.formatMessage(messages.requested)} onClick={this.handleFollow} />;\n      } else if (account.getIn(['relationship', 'muting'])) {\n        actionBtn = <Button className='logo-button' text={intl.formatMessage(messages.unmute)} onClick={this.handleMute} />;\n      } else if (!account.getIn(['relationship', 'blocking'])) {\n        actionBtn = <Button disabled={account.getIn(['relationship', 'blocked_by'])} className={classNames('logo-button', { 'button--destructive': account.getIn(['relationship', 'following']) })} text={intl.formatMessage(account.getIn(['relationship', 'following']) ? messages.unfollow : messages.follow)} onClick={this.handleFollow} />;\n      } else if (account.getIn(['relationship', 'blocking'])) {\n        actionBtn = <Button className='logo-button' text={intl.formatMessage(messages.unblock)} onClick={this.handleBlock} />;\n      }\n    } else {\n      actionBtn = <Button className='logo-button' text={intl.formatMessage(messages.edit_profile)} onClick={this.handleEditProfile} />;\n    }\n\n    return (\n      <div className='account-card'>\n        <Permalink href={account.get('url')} to={`/@${account.get('acct')}`} className='account-card__permalink'>\n          <div className='account-card__header'>\n            <img\n              src={\n                autoPlayGif ? account.get('header') : account.get('header_static')\n              }\n              alt=''\n            />\n          </div>\n\n          <div className='account-card__title'>\n            <div className='account-card__title__avatar'><Avatar account={account} size={56} /></div>\n            <DisplayName account={account} />\n          </div>\n        </Permalink>\n\n        {account.get('note').length > 0 && (\n          <div\n            className='account-card__bio translate'\n            onMouseEnter={this.handleMouseEnter}\n            onMouseLeave={this.handleMouseLeave}\n            dangerouslySetInnerHTML={{ __html: account.get('note_emojified') }}\n          />\n        )}\n\n        <div className='account-card__actions'>\n          <div className='account-card__counters'>\n            <div className='account-card__counters__item'>\n              <ShortNumber value={account.get('statuses_count')} />\n              <small>\n                <FormattedMessage id='account.posts' defaultMessage='Posts' />\n              </small>\n            </div>\n\n            <div className='account-card__counters__item'>\n              {account.get('followers_count') < 0 ? '-' : <ShortNumber value={account.get('followers_count')} />}{' '}\n              <small>\n                <FormattedMessage\n                  id='account.followers'\n                  defaultMessage='Followers'\n                />\n              </small>\n            </div>\n\n            <div className='account-card__counters__item'>\n              <ShortNumber value={account.get('following_count')} />{' '}\n              <small>\n                <FormattedMessage\n                  id='account.following'\n                  defaultMessage='Following'\n                />\n              </small>\n            </div>\n          </div>\n\n          <div className='account-card__actions__button'>\n            {actionBtn}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { addColumn, removeColumn, moveColumn, changeColumnParams } from 'flavours/glitch/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'flavours/glitch/actions/directory';\nimport { List as ImmutableList } from 'immutable';\nimport AccountCard from './components/account_card';\nimport RadioButton from 'flavours/glitch/components/radio_button';\nimport LoadMore from 'flavours/glitch/components/load_more';\nimport ScrollContainer from 'flavours/glitch/containers/scroll_container';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\n\nconst messages = defineMessages({\n  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },\n  recentlyActive: { id: 'directory.recently_active', defaultMessage: 'Recently active' },\n  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },\n  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },\n  federated: { id: 'directory.federated', defaultMessage: 'From known fediverse' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),\n  isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Directory extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    params: PropTypes.shape({\n      order: PropTypes.string,\n      local: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    order: null,\n    local: null,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECTORY', this.getParams(this.props, this.state)));\n    }\n  }\n\n  getParams = (props, state) => ({\n    order: state.order === null ? (props.params.order || 'active') : state.order,\n    local: state.local === null ? (props.params.local || false) : state.local,\n  });\n\n  handleMove = dir => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchDirectory(this.getParams(this.props, this.state)));\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const { dispatch } = this.props;\n    const paramsOld = this.getParams(prevProps, prevState);\n    const paramsNew = this.getParams(this.props, this.state);\n\n    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {\n      dispatch(fetchDirectory(paramsNew));\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleChangeOrder = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n    } else {\n      this.setState({ order: e.target.value });\n    }\n  }\n\n  handleChangeLocal = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));\n    } else {\n      this.setState({ local: e.target.value === '1' });\n    }\n  }\n\n  handleLoadMore = () => {\n    const { dispatch } = this.props;\n    dispatch(expandDirectory(this.getParams(this.props, this.state)));\n  }\n\n  render () {\n    const { isLoading, accountIds, intl, columnId, multiColumn, domain } = this.props;\n    const { order, local }  = this.getParams(this.props, this.state);\n    const pinned = !!columnId;\n\n    const scrollableArea = (\n      <div className='scrollable'>\n        <div className='filter-form'>\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='order' value='active' label={intl.formatMessage(messages.recentlyActive)} checked={order === 'active'} onChange={this.handleChangeOrder} />\n            <RadioButton name='order' value='new' label={intl.formatMessage(messages.newArrivals)} checked={order === 'new'} onChange={this.handleChangeOrder} />\n          </div>\n\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='local' value='1' label={intl.formatMessage(messages.local, { domain })} checked={local} onChange={this.handleChangeLocal} />\n            <RadioButton name='local' value='0' label={intl.formatMessage(messages.federated)} checked={!local} onChange={this.handleChangeLocal} />\n          </div>\n        </div>\n\n        <div className='directory__list'>\n          {isLoading ? <LoadingIndicator /> : accountIds.map(accountId => (\n            <AccountCard id={accountId} key={accountId} />\n          ))}\n        </div>\n\n        <LoadMore onClick={this.handleLoadMore} visible={!isLoading} />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='address-book-o'\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        {multiColumn && !pinned ? <ScrollContainer scrollKey='directory'>{scrollableArea}</ScrollContainer> : scrollableArea}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}